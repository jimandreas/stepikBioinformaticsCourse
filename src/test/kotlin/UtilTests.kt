import org.junit.jupiter.api.AfterEach
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test

import org.junit.jupiter.api.Assertions.*
import org.junit.jupiter.api.DisplayName
import util.findClumps
import util.frequenceWordsWithMismatches
import util.frequencyTable
import util.neighbors

internal class UtilTests {

    @BeforeEach
    fun setUp() {
    }

    @AfterEach
    fun tearDown() {
    }

    @Test
    @DisplayName("util: frequenceTableTest function test")
    fun testFrequencyTable() {

        val testString = "abcdabcd"  // should find two instances of abcd in the string
        val resultMap = frequencyTable(testString, 4)
        val abcd = resultMap["abcd"]
        assertNotNull(abcd)
        assertEquals(2, abcd)
    }

    @Test
    @DisplayName("util: frequenceTableTest function test - null return")
    fun testFrequencyTableNullReturn() {

        val testString = "abc"  // no string of length 4!
        val resultMap = frequencyTable(testString, 4)
        assertEquals(0, resultMap.size)
    }

    @Test
    @DisplayName("util: frequenceTableTest function test - overlapping")
    fun testFrequencyTableOverlappingString() {

        val testString = "ababababacd"  // no string of length 4!
        val resultMap = frequencyTable(testString, 4)
        val abcd = resultMap["baba"]
        assertNotNull(abcd)
        assertEquals(3, abcd)
    }

    @Test
    @DisplayName("util: findClumps function test - basic function")
    fun testFindClumpsBasicTest() {

        // the window size is 6 characters long - so ab ab ab should produce a map of "ab" to 3 occurrences
        // dups are discarded.

        val testString = "ababababacdedfdababababacd"
        val resultMap = findClumps(testString, 2, 6, 3)

        assertEquals(2, resultMap.size)
        val result1 = resultMap[0]
        val result2 = resultMap[1]
        assertEquals(Pair("ab", 3), result1)
        assertEquals(Pair("ba", 3), result2)
    }

    /**
     *
    Code Challenge: Implement Neighbors to find the d-neighborhood of a string.

    Input: A string Pattern and an integer d.
    Output: The collection of strings Neighbors(Pattern, d).

    Sample Input:

    ACG
    1

    Sample Output:

    CCG TCG GCG AAG ATG AGG ACA ACC ACT ACG
     */
    @Test
    @DisplayName("test neighborhood")
    fun testNeighborhood() {
        val result = neighbors("ACG", 1).sortedDescending()
        val expectedResult =
            listOf("CCG", "TCG", "GCG", "AAG", "ATG", "AGG", "ACA", "ACC", "ACT", "ACG").sortedDescending()

        assertEquals(expectedResult, result)

        val result2 = neighbors("CATGGACGGCGA", 2).sortedDescending()
        for (s in result2) {
            print("$s ")
        }

    }

    @Test
    @DisplayName("test neighborhood - corner cases")
    fun testNeighborhoodCornerCases() {
        val result = neighbors("A", 1).sortedDescending()
        val expectedResult = listOf("A", "C", "G", "T").sortedDescending()
        assertEquals(expectedResult, result)

        val resultE = neighbors("", 1).sortedDescending()
        val expectedResultE = listOf("")
        assertEquals(expectedResultE, resultE)

    }


    @Test
    @DisplayName("test neighborhood - exam question")
    fun testNeighborhoodExamQuestion() {
        val result2 = neighbors("CATGGACGGCGA", 2).sortedDescending()
        var answer = ""
        for (s in result2) {
            answer += "$s "
        }
        // note: trailing space added :-)
        val expectedResult =
            "TTTGGACGGCGA TGTGGACGGCGA TCTGGACGGCGA TATTGACGGCGA TATGTACGGCGA TATGGTCGGCGA TATGGGCGGCGA TATGGCCGGCGA TATGGATGGCGA TATGGAGGGCGA TATGGACTGCGA TATGGACGTCGA TATGGACGGTGA TATGGACGGGGA TATGGACGGCTA TATGGACGGCGT TATGGACGGCGG TATGGACGGCGC TATGGACGGCGA TATGGACGGCCA TATGGACGGCAA TATGGACGGAGA TATGGACGCCGA TATGGACGACGA TATGGACCGCGA TATGGACAGCGA TATGGAAGGCGA TATGCACGGCGA TATGAACGGCGA TATCGACGGCGA TATAGACGGCGA TAGGGACGGCGA TACGGACGGCGA TAAGGACGGCGA GTTGGACGGCGA GGTGGACGGCGA GCTGGACGGCGA GATTGACGGCGA GATGTACGGCGA GATGGTCGGCGA GATGGGCGGCGA GATGGCCGGCGA GATGGATGGCGA GATGGAGGGCGA GATGGACTGCGA GATGGACGTCGA GATGGACGGTGA GATGGACGGGGA GATGGACGGCTA GATGGACGGCGT GATGGACGGCGG GATGGACGGCGC GATGGACGGCGA GATGGACGGCCA GATGGACGGCAA GATGGACGGAGA GATGGACGCCGA GATGGACGACGA GATGGACCGCGA GATGGACAGCGA GATGGAAGGCGA GATGCACGGCGA GATGAACGGCGA GATCGACGGCGA GATAGACGGCGA GAGGGACGGCGA GACGGACGGCGA GAAGGACGGCGA CTTTGACGGCGA CTTGTACGGCGA CTTGGTCGGCGA CTTGGGCGGCGA CTTGGCCGGCGA CTTGGATGGCGA CTTGGAGGGCGA CTTGGACTGCGA CTTGGACGTCGA CTTGGACGGTGA CTTGGACGGGGA CTTGGACGGCTA CTTGGACGGCGT CTTGGACGGCGG CTTGGACGGCGC CTTGGACGGCGA CTTGGACGGCCA CTTGGACGGCAA CTTGGACGGAGA CTTGGACGCCGA CTTGGACGACGA CTTGGACCGCGA CTTGGACAGCGA CTTGGAAGGCGA CTTGCACGGCGA CTTGAACGGCGA CTTCGACGGCGA CTTAGACGGCGA CTGGGACGGCGA CTCGGACGGCGA CTAGGACGGCGA CGTTGACGGCGA CGTGTACGGCGA CGTGGTCGGCGA CGTGGGCGGCGA CGTGGCCGGCGA CGTGGATGGCGA CGTGGAGGGCGA CGTGGACTGCGA CGTGGACGTCGA CGTGGACGGTGA CGTGGACGGGGA CGTGGACGGCTA CGTGGACGGCGT CGTGGACGGCGG CGTGGACGGCGC CGTGGACGGCGA CGTGGACGGCCA CGTGGACGGCAA CGTGGACGGAGA CGTGGACGCCGA CGTGGACGACGA CGTGGACCGCGA CGTGGACAGCGA CGTGGAAGGCGA CGTGCACGGCGA CGTGAACGGCGA CGTCGACGGCGA CGTAGACGGCGA CGGGGACGGCGA CGCGGACGGCGA CGAGGACGGCGA CCTTGACGGCGA CCTGTACGGCGA CCTGGTCGGCGA CCTGGGCGGCGA CCTGGCCGGCGA CCTGGATGGCGA CCTGGAGGGCGA CCTGGACTGCGA CCTGGACGTCGA CCTGGACGGTGA CCTGGACGGGGA CCTGGACGGCTA CCTGGACGGCGT CCTGGACGGCGG CCTGGACGGCGC CCTGGACGGCGA CCTGGACGGCCA CCTGGACGGCAA CCTGGACGGAGA CCTGGACGCCGA CCTGGACGACGA CCTGGACCGCGA CCTGGACAGCGA CCTGGAAGGCGA CCTGCACGGCGA CCTGAACGGCGA CCTCGACGGCGA CCTAGACGGCGA CCGGGACGGCGA CCCGGACGGCGA CCAGGACGGCGA CATTTACGGCGA CATTGTCGGCGA CATTGGCGGCGA CATTGCCGGCGA CATTGATGGCGA CATTGAGGGCGA CATTGACTGCGA CATTGACGTCGA CATTGACGGTGA CATTGACGGGGA CATTGACGGCTA CATTGACGGCGT CATTGACGGCGG CATTGACGGCGC CATTGACGGCGA CATTGACGGCCA CATTGACGGCAA CATTGACGGAGA CATTGACGCCGA CATTGACGACGA CATTGACCGCGA CATTGACAGCGA CATTGAAGGCGA CATTCACGGCGA CATTAACGGCGA CATGTTCGGCGA CATGTGCGGCGA CATGTCCGGCGA CATGTATGGCGA CATGTAGGGCGA CATGTACTGCGA CATGTACGTCGA CATGTACGGTGA CATGTACGGGGA CATGTACGGCTA CATGTACGGCGT CATGTACGGCGG CATGTACGGCGC CATGTACGGCGA CATGTACGGCCA CATGTACGGCAA CATGTACGGAGA CATGTACGCCGA CATGTACGACGA CATGTACCGCGA CATGTACAGCGA CATGTAAGGCGA CATGGTTGGCGA CATGGTGGGCGA CATGGTCTGCGA CATGGTCGTCGA CATGGTCGGTGA CATGGTCGGGGA CATGGTCGGCTA CATGGTCGGCGT CATGGTCGGCGG CATGGTCGGCGC CATGGTCGGCGA CATGGTCGGCCA CATGGTCGGCAA CATGGTCGGAGA CATGGTCGCCGA CATGGTCGACGA CATGGTCCGCGA CATGGTCAGCGA CATGGTAGGCGA CATGGGTGGCGA CATGGGGGGCGA CATGGGCTGCGA CATGGGCGTCGA CATGGGCGGTGA CATGGGCGGGGA CATGGGCGGCTA CATGGGCGGCGT CATGGGCGGCGG CATGGGCGGCGC CATGGGCGGCGA CATGGGCGGCCA CATGGGCGGCAA CATGGGCGGAGA CATGGGCGCCGA CATGGGCGACGA CATGGGCCGCGA CATGGGCAGCGA CATGGGAGGCGA CATGGCTGGCGA CATGGCGGGCGA CATGGCCTGCGA CATGGCCGTCGA CATGGCCGGTGA CATGGCCGGGGA CATGGCCGGCTA CATGGCCGGCGT CATGGCCGGCGG CATGGCCGGCGC CATGGCCGGCGA CATGGCCGGCCA CATGGCCGGCAA CATGGCCGGAGA CATGGCCGCCGA CATGGCCGACGA CATGGCCCGCGA CATGGCCAGCGA CATGGCAGGCGA CATGGATTGCGA CATGGATGTCGA CATGGATGGTGA CATGGATGGGGA CATGGATGGCTA CATGGATGGCGT CATGGATGGCGG CATGGATGGCGC CATGGATGGCGA CATGGATGGCCA CATGGATGGCAA CATGGATGGAGA CATGGATGCCGA CATGGATGACGA CATGGATCGCGA CATGGATAGCGA CATGGAGTGCGA CATGGAGGTCGA CATGGAGGGTGA CATGGAGGGGGA CATGGAGGGCTA CATGGAGGGCGT CATGGAGGGCGG CATGGAGGGCGC CATGGAGGGCGA CATGGAGGGCCA CATGGAGGGCAA CATGGAGGGAGA CATGGAGGCCGA CATGGAGGACGA CATGGAGCGCGA CATGGAGAGCGA CATGGACTTCGA CATGGACTGTGA CATGGACTGGGA CATGGACTGCTA CATGGACTGCGT CATGGACTGCGG CATGGACTGCGC CATGGACTGCGA CATGGACTGCCA CATGGACTGCAA CATGGACTGAGA CATGGACTCCGA CATGGACTACGA CATGGACGTTGA CATGGACGTGGA CATGGACGTCTA CATGGACGTCGT CATGGACGTCGG CATGGACGTCGC CATGGACGTCGA CATGGACGTCCA CATGGACGTCAA CATGGACGTAGA CATGGACGGTTA CATGGACGGTGT CATGGACGGTGG CATGGACGGTGC CATGGACGGTGA CATGGACGGTCA CATGGACGGTAA CATGGACGGGTA CATGGACGGGGT CATGGACGGGGG CATGGACGGGGC CATGGACGGGGA CATGGACGGGCA CATGGACGGGAA CATGGACGGCTT CATGGACGGCTG CATGGACGGCTC CATGGACGGCTA CATGGACGGCGT CATGGACGGCGG CATGGACGGCGC CATGGACGGCGA CATGGACGGCCT CATGGACGGCCG CATGGACGGCCC CATGGACGGCCA CATGGACGGCAT CATGGACGGCAG CATGGACGGCAC CATGGACGGCAA CATGGACGGATA CATGGACGGAGT CATGGACGGAGG CATGGACGGAGC CATGGACGGAGA CATGGACGGACA CATGGACGGAAA CATGGACGCTGA CATGGACGCGGA CATGGACGCCTA CATGGACGCCGT CATGGACGCCGG CATGGACGCCGC CATGGACGCCGA CATGGACGCCCA CATGGACGCCAA CATGGACGCAGA CATGGACGATGA CATGGACGAGGA CATGGACGACTA CATGGACGACGT CATGGACGACGG CATGGACGACGC CATGGACGACGA CATGGACGACCA CATGGACGACAA CATGGACGAAGA CATGGACCTCGA CATGGACCGTGA CATGGACCGGGA CATGGACCGCTA CATGGACCGCGT CATGGACCGCGG CATGGACCGCGC CATGGACCGCGA CATGGACCGCCA CATGGACCGCAA CATGGACCGAGA CATGGACCCCGA CATGGACCACGA CATGGACATCGA CATGGACAGTGA CATGGACAGGGA CATGGACAGCTA CATGGACAGCGT CATGGACAGCGG CATGGACAGCGC CATGGACAGCGA CATGGACAGCCA CATGGACAGCAA CATGGACAGAGA CATGGACACCGA CATGGACAACGA CATGGAATGCGA CATGGAAGTCGA CATGGAAGGTGA CATGGAAGGGGA CATGGAAGGCTA CATGGAAGGCGT CATGGAAGGCGG CATGGAAGGCGC CATGGAAGGCGA CATGGAAGGCCA CATGGAAGGCAA CATGGAAGGAGA CATGGAAGCCGA CATGGAAGACGA CATGGAACGCGA CATGGAAAGCGA CATGCTCGGCGA CATGCGCGGCGA CATGCCCGGCGA CATGCATGGCGA CATGCAGGGCGA CATGCACTGCGA CATGCACGTCGA CATGCACGGTGA CATGCACGGGGA CATGCACGGCTA CATGCACGGCGT CATGCACGGCGG CATGCACGGCGC CATGCACGGCGA CATGCACGGCCA CATGCACGGCAA CATGCACGGAGA CATGCACGCCGA CATGCACGACGA CATGCACCGCGA CATGCACAGCGA CATGCAAGGCGA CATGATCGGCGA CATGAGCGGCGA CATGACCGGCGA CATGAATGGCGA CATGAAGGGCGA CATGAACTGCGA CATGAACGTCGA CATGAACGGTGA CATGAACGGGGA CATGAACGGCTA CATGAACGGCGT CATGAACGGCGG CATGAACGGCGC CATGAACGGCGA CATGAACGGCCA CATGAACGGCAA CATGAACGGAGA CATGAACGCCGA CATGAACGACGA CATGAACCGCGA CATGAACAGCGA CATGAAAGGCGA CATCTACGGCGA CATCGTCGGCGA CATCGGCGGCGA CATCGCCGGCGA CATCGATGGCGA CATCGAGGGCGA CATCGACTGCGA CATCGACGTCGA CATCGACGGTGA CATCGACGGGGA CATCGACGGCTA CATCGACGGCGT CATCGACGGCGG CATCGACGGCGC CATCGACGGCGA CATCGACGGCCA CATCGACGGCAA CATCGACGGAGA CATCGACGCCGA CATCGACGACGA CATCGACCGCGA CATCGACAGCGA CATCGAAGGCGA CATCCACGGCGA CATCAACGGCGA CATATACGGCGA CATAGTCGGCGA CATAGGCGGCGA CATAGCCGGCGA CATAGATGGCGA CATAGAGGGCGA CATAGACTGCGA CATAGACGTCGA CATAGACGGTGA CATAGACGGGGA CATAGACGGCTA CATAGACGGCGT CATAGACGGCGG CATAGACGGCGC CATAGACGGCGA CATAGACGGCCA CATAGACGGCAA CATAGACGGAGA CATAGACGCCGA CATAGACGACGA CATAGACCGCGA CATAGACAGCGA CATAGAAGGCGA CATACACGGCGA CATAAACGGCGA CAGTGACGGCGA CAGGTACGGCGA CAGGGTCGGCGA CAGGGGCGGCGA CAGGGCCGGCGA CAGGGATGGCGA CAGGGAGGGCGA CAGGGACTGCGA CAGGGACGTCGA CAGGGACGGTGA CAGGGACGGGGA CAGGGACGGCTA CAGGGACGGCGT CAGGGACGGCGG CAGGGACGGCGC CAGGGACGGCGA CAGGGACGGCCA CAGGGACGGCAA CAGGGACGGAGA CAGGGACGCCGA CAGGGACGACGA CAGGGACCGCGA CAGGGACAGCGA CAGGGAAGGCGA CAGGCACGGCGA CAGGAACGGCGA CAGCGACGGCGA CAGAGACGGCGA CACTGACGGCGA CACGTACGGCGA CACGGTCGGCGA CACGGGCGGCGA CACGGCCGGCGA CACGGATGGCGA CACGGAGGGCGA CACGGACTGCGA CACGGACGTCGA CACGGACGGTGA CACGGACGGGGA CACGGACGGCTA CACGGACGGCGT CACGGACGGCGG CACGGACGGCGC CACGGACGGCGA CACGGACGGCCA CACGGACGGCAA CACGGACGGAGA CACGGACGCCGA CACGGACGACGA CACGGACCGCGA CACGGACAGCGA CACGGAAGGCGA CACGCACGGCGA CACGAACGGCGA CACCGACGGCGA CACAGACGGCGA CAATGACGGCGA CAAGTACGGCGA CAAGGTCGGCGA CAAGGGCGGCGA CAAGGCCGGCGA CAAGGATGGCGA CAAGGAGGGCGA CAAGGACTGCGA CAAGGACGTCGA CAAGGACGGTGA CAAGGACGGGGA CAAGGACGGCTA CAAGGACGGCGT CAAGGACGGCGG CAAGGACGGCGC CAAGGACGGCGA CAAGGACGGCCA CAAGGACGGCAA CAAGGACGGAGA CAAGGACGCCGA CAAGGACGACGA CAAGGACCGCGA CAAGGACAGCGA CAAGGAAGGCGA CAAGCACGGCGA CAAGAACGGCGA CAACGACGGCGA CAAAGACGGCGA ATTGGACGGCGA AGTGGACGGCGA ACTGGACGGCGA AATTGACGGCGA AATGTACGGCGA AATGGTCGGCGA AATGGGCGGCGA AATGGCCGGCGA AATGGATGGCGA AATGGAGGGCGA AATGGACTGCGA AATGGACGTCGA AATGGACGGTGA AATGGACGGGGA AATGGACGGCTA AATGGACGGCGT AATGGACGGCGG AATGGACGGCGC AATGGACGGCGA AATGGACGGCCA AATGGACGGCAA AATGGACGGAGA AATGGACGCCGA AATGGACGACGA AATGGACCGCGA AATGGACAGCGA AATGGAAGGCGA AATGCACGGCGA AATGAACGGCGA AATCGACGGCGA AATAGACGGCGA AAGGGACGGCGA AACGGACGGCGA AAAGGACGGCGA "
        assertEquals(expectedResult, answer)
    }

    @Test
    @DisplayName("test frequent words with mismatches")
    fun testFrequentWordsWithMismatches() {

        val genome2 = "CACAGTAGGCGCCGGCACACACAGCCCCGGGCCCCGGGCCGCCCCGGGCCGGCGGCCGCCGGCGCCGGCACACCGGCACAGCCGTACCGGCACAGTAGTACCGGCCGGCCGGCACACCGGCACACCGGGTACACACCGGGGCGCACACACAGGCGGGCGCCGGGCCCCGGGCCGTACCGGGCCGCCGGCGGCCCACAGGCGCCGGCACAGTACCGGCACACACAGTAGCCCACACACAGGCGGGCGGTAGCCGGCGCACACACACACAGTAGGCGCACAGCCGCCCACACACACCGGCCGGCCGGCACAGGCGGGCGGGCGCACACACACCGGCACAGTAGTAGGCGGCCGGCGCACAGCC"
        val kmerSize2 = 10
        val mismatches2 = 2

        val g = genome2
        val k = kmerSize2
        val m = mismatches2

        val matchList = frequenceWordsWithMismatches(g, k, m).sorted()

        var answer = ""
        for (s in matchList) {
            answer += "$s "
        }
        // note: trailing space added :-)
        val expectedResult =
            "GCACACAGAC GCGCACACAC "
        assertEquals(expectedResult, answer)
    }



}