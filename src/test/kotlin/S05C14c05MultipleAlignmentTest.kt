@file:Suppress("UNUSED_VARIABLE", "MemberVisibilityCanBePrivate", "UNUSED_PARAMETER")

import org.junit.jupiter.api.AfterEach
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Test
import util.MultipleLongestCommonSubsequence

/**
 * In the Multiple Longest Common Subsequence Problem,
 * the score of a column of the alignment matrix is equal to 1
 * if all the column's symbols are identical, and 0 if even one symbol disagrees.

Code Challenge: Solve the Multiple Longest Common Subsequence Problem.

Input: Three DNA strings of length at most 10.
Output: The length of a longest common subsequence of these three strings, followed by a multiple alignment of the three strings corresponding to such an alignment.

 * See also:
 * stepik: @link: https://stepik.org/lesson/240309/step/5?unit=212655
 * rosalind: @link: http://rosalind.info/problems/ba5m/
 * book (5 Epilogue): @link: https://www.bioinformaticsalgorithms.org/bioinformatics-chapter-5
 * youtube: @link: https://www.youtube.com/watch?v=CTPiYiTQcuA&list=PLQ-85lQlPqFNmbPEsMoxb5dM5qtRaVShn&index=10  Multiple Sequence Alignment
 *
 * Uses the Kotlin Multik multidimensional array library
 * @link: https://github.com/Kotlin/multik
 * @link: https://blog.jetbrains.com/kotlin/2021/02/multik-multidimensional-arrays-in-kotlin/
 */

internal class S05C14c05MultipleAlignmentTest {

    @BeforeEach
    fun setUp() {
    }

    @AfterEach
    fun tearDown() {
    }


    /**
     * TEST DATASET 1:
     * This test makes sure that your code follows the scoring scheme
     * of the problem. The score will only increase if there is a match
     * between all three strings. Otherwise, the score remains unchanged.
     * In this dataset your code should not penalize the indels in
     * reconstructed alignment for strings r and t.
     */
    @Test
    @DisplayName("linear space alignment test 01")
    fun findMiddleEdgeTest01() {

        val sample = """
            Input:
            A
            AT
            A
            Output:
            1
            A-
            AT
            A-
        """.trimIndent()

        runTest(sample)
    }

    /**
     * TEST DATASET 2:
     * This test makes sure that your code can accurately reconstruct the
     * alignment when one of the aligned strings is primarily indels.
     */
    @Test
    @DisplayName("linear space alignment test 02")
    fun findMiddleEdgeTest02() {

        val sample = """
            Input:
            AAAAT
            CCCCT
            T
            Output:
            1
            AAAAT
            CCCCT
            ----T
        """.trimIndent()

        runTest(sample)
    }

    /**
     * TEST DATASET 3:
     * This test makes sure that your code correctly forces a
     * three character match whenever possible.
     */
    @Test
    @DisplayName("linear space alignment test 03")
    fun findMiddleEdgeTest03() {

        val sample = """
            Input:
            AT
            ACCT
            AGGGGT
            Output:
            2
            A------T
            A----CCT
            AGGGG--T
        """.trimIndent()

        runTest(sample)
    }

    /**
     * TEST DATASET 4:
     * This test makes sure that your code is
     * able to output a score of zero if there are no matching
     * characters between the three strings.
     */

    @Test
    @DisplayName("linear space alignment test 04")
    fun findMiddleEdgeTest04() {

        val sample = """
            Input:
            GGAG
            TT
            CCCC
            Output:
            0
            ----GGAG
            --TT----
            CCCC----
        """.trimIndent()

        runTest(sample)
    }

    /**
     * TEST DATASET 5:
     * This test makes sure that your code is able to
     * correctly handle inputs in which all three strings are one character long.
     */

    @Test
    @DisplayName("linear space alignment test 05")
    fun findMiddleEdgeTest05() {

        val sample = """
            Input:
            T
            T
            T
            Output:
            1
            T
            T
            T
        """.trimIndent()

        runTest(sample)
    }

    /**
     * SAMPLE PROBLEM
     */
    @Test
    @DisplayName("sample dataset from word file")
    fun findMiddleEdgeSampleTest() {

        val sample = """
            Input:
            ATATCGG
            TCCGA
            ATGTACTG
            Output:
            3
            ATATCC-G-
            ---TCC-GA
            ATGTACTG-
        """.trimIndent()

        runTest(sample)
    }

    /**
    SAMPLE GIVEN DATASET PROBLEM

     */
    @Test
    @DisplayName("sample dataset extra")
    fun findMiddleEdgeGivenProblemTest() {

        val sample = """
         Sample Input:
        ATATCCG
        TCCGA
        ATGTACTG
        Sample Output:
        3
        ATATCC-G-
        ---TCC-GA
        ATGTACTG-
        """.trimIndent()

        runTest(sample, true)
    }

    /**
     * Extra Dataset
     */
//    @Test
//    @DisplayName("extra dataset extra")
//    fun findMiddleEdgeExtraDatasetTest() {
//
//        val sample = """
//Input:
//0 0 5
//PTGQSYVTTARTTAECRVLHVMPFNYHMASIMDSYVFLNFGPALCMHEWYLCTMRCGWSKVGLGYMTCFCKNYHMSVKDAAYDGDKEMDGMTKWCVMPNCMWENEAQDQMQAWDSKGWQDFCDDIKAGMQFIWDSEPHGNFSEIMSMPFDIDVTIFHMQEPEIVQWTMNPQHSPHRPKSCTMASWRTQHHTAWNHCPVSASAFQPQVDVCDNVRFYGETAMNIVGGQAEAEKMKIHPSYQGHIHLCIGNEDTDGQQLWCQNHMQHEPFRYNDSDGDVTYQKHPACAAIPNIHSWFQPWGIDYQSNRQFGNQMDECYDLWALRVWDEPSVTWYYRHDLHDHSESWQRCETNVMWYKGAKDMRGDLWSPRVMIMVPFLTVWRCGVTCGWLWPKSFSKAMMRAQKIHEFPQQRIKTNGAKPDNEREWQAHHAFNTECKFVGPKPILLSKPWRQVDYDYCSFSDDMHFRKCVLTDEFFNVVSTKMVSQCWFWADTLNPEVSNQFMTQEYIVKMTSVCEVLNGVGGLPFVTADSCSSPVIEWGLWTNDQWEGFFKLYWVMLDNDKNPVKWPHNRGIVHGMWPIWWIEQNPIKVGQACMWYPLIDNYWEDNRDVLKPKEDMMAIDISGQVKGWATDIRPSSWSLYIIPDMVWRGSLCDLARVEYEHKPWHNCTTYHMRCVIFYYFAPIGNHNDATIPGWAEWCYWPKMWEGYVMVNCFTEQQHQAEAAVAWGWYGCTPNVPPVSPIMQSFKMFICPNQFQDLKLMQDPCWVLNKFSVNERQLDHCPMDASDHWSPSHNRWNLTFQAWPGRQEFAWPVLFFFSDVWWDAHDYIYVNVMGYTVYHAWSASWVVTQLGNIHGECWNCMVPPEIVMSNTNQKYEHYMIASREMVTPHRRRYAVCTFRNLAWKSFDQQFFCRENFIGIFPADCGIIKCEVFRDLQEFFDRENSKCDQNSQKNMHKFKYCFQFQPQDPVKQRLNPVHPWCRSEEDGLRTQEDIVRPAQYNEWPMHQNDAKLVQGCCIYKYKRKWIPRKYLKTYGTNMPEHFYYQRQVLSRYGSMRRMWIKNEQYVDHRDRYVMLEPGCETFFYSFVMEWDEINDNNSRSKEVAPPKEFDYMYNNTCHDTWRFSEQVKNDNQTQFFVKQTFVRLHLQLDQILPEAIFMSFTLDWPQYGYQIAKGNTFKCMQFTNYKGSTFGWLDVGPGNRPRHWWKTVFWQKWWISMWLDVQDLSKDAFDNMWEKQAMQKPKFHDTRFLQAESKDTRSKEADSKVDPWWRQHSQERFYPGGSECCWMDALHPLKLRNFVEFVVVTKLPNCLWHAFFQYFPEMWLCFMDHASPKQKVWRMNCYRADFCYFMCELGYETDDRSAETAIVMYEPMQMGWNHWWWLTWLHMACTLIIDHIMMNLQVALYGCIQPLNFWMATFHLVWQAKVFFFFAFERFHTHVIMCQKAKENESHRLQPEERMSKWHYTCCGTMFHVNWHAEQGKSGMYTQALRLTHFTVWDQGSHLMCTGIYMDMPQNHCSWARHRTDPCALVVHWGPKVPKPNDTFGCHPNNSEIEPFPPRDDAQANHIEDCHEYRFCGMTHNAYTDHPGFLRNCTENVTEKIMEGPLYPWDNDRGSHAQLVMWCRVASEAVQWVSSGYKGINSAYRYVNLWGKHICRAWQDWDWVGVHIQCNHIWGQETDPDEQWLCIHENGINFFDSNLADYTAEQEDFGDWYCQKSHLHSKVDVKQYSQIATIIWTWQHTNCGCSTCWVPLHRIFSLDNDVPPCIQVYMGDKRQMWRNKDNHNKSQMTYMKLECMFPDKDFRQQSTGERPVTELMCKNIWTVHYCYIAMFYDVEPKCDIEDCYMGVAYMMSFAEGFMHMYKALVCPKSGSMYDWTVVQIIYTWQYFWHRPETTESTWTNQRHPLQLGWNTSLMENIFAIESMKKMTCYAKEPTMRRAAIWLVQMSSYMVHHKCPRHYNEHLRLLVPCSWCQQDKWNESCQWHHPDPYIMKPSYAWWDLLNTCDPVWRRNTYCCKMANRAAHQDWSSNGDRHNYPVIRMENTSDTHNMNMYESVPERPDTFCGLNSSLQGHEWQMYSQAHHPDMFTENMQDYYYGTIVFCHAGICWCWLMHIQYSCCHYACCIPLKPLCAFIESQCQIVNQSFASRTTCQDQSFPHYLIYEDFVIAYEIWDKTAPQMFPFYYYWRWVDRTDCHVQDETDGSWTKEDCAGCSCSRELSYMGFNWVFPYSRTVQLMMEHVPGWCYMSGVFLKLHPFVGMIQKGKTHHIWHGDRWHGKGYNVSTDYYDCVYYEPCLRNKYMSDVIGYTGWLGWVQTLTDHVKSSPSKGRIPVWNQFTQVKKYQVMEHLFYKGAHQDHICVTCEGWVMPPNQCFWFQDQDSQCSLQSDQMERLEAVCYPTMWYRGAWKRHNHTRLWLTTYDPGYCRNRDWAWVTCCNCIAALMQQESNRKYQWCWCYWSTNHPMHNSDIYVVWDDDGERPDGCSNEIRQAKRPCTCDISDARPLKIYMIYCFPCEGKYIDIWMGKMRAFDFLNFMDGKFTIRDGAIFPPQMVPCNVLVFELVYKSVWAETPTIRGWYQCWPAQKVYANGWISMLVIMDFAQKKFVGHDLSTATCMNHRVDCFKNNVRRHVEPPLMLIMNKIWCEHDFMTAMDVIIYASPDMYMPGKPYLGTFQYPYLYKHGSSDYVELEASKINGYMPYWCHESEDSTCHALHDPAHCDLRWMFMCCPRTTKPYVWMCNTWIRYDKQDLAPVNSFIPAHQDVHPYCTCGRAVWTQKRFWKAWWFLITCPDPHDSYRSFDEVGEPIETACRDDCVINIYHSQYNMSSWAKAVAFIKWMTPLQPYEPCFCQKMEFKQWWEKLCVAWSQPVFNFSIPKHVFIVERYIEDEHWEVIYWMKKFVIPKLHMGPWQSCTIGYREYACIGIDAHDPYRCGDKNMANMRFPWWDIISFLLFQPLPMECSYHGQGTFCLKWIAARNGTYQFRIVEVYKFSSAEVNRNTQYFSHHHMMLMPHNFYHMGTFDYCWLKYPFPTMDWNVSTTSPNILGLENHKDLCIMVMNCEREMTPERIMQYKVLLSLWRENVVMPCCLIALVNLLGQNKENTPLDCPKMPMVMDYHPRKFWLSPGFIGKYHIAQRTRQWRLIFCPAQTKMDVCASYPFPGPRTDHTRSMWLMGHSTAPEFMFMTNKNMQIGCPPVGAQGHVEPPTRQRKGKHQYVCEPWKMWKHKPQWRAWAINWKKVITCWSVSFDFPWDSIFTVKDCELRGGSFAMMRKAYQPPRMSQLPWVVKCNFSPKQGYEQYITVDGKTQKTRVIDPMPDPHHATYGIMFSHQYTVNWIHNCERLTMAKINRVYFTIIADRWGHYCVNINHQTLQMDDMMCYDDSVSGQGYLCMCCTIIPWGQCVNAYIHRCWHCTDVYIHRLLPEQETVFQFCDNHMMAQMHLMPTLNEKGSFSWQRVMSGGVFWIVNGCNMYAFSHHWLAPHHDRTNQGVYMLSQPQMCWALNDDHTYHKNNINAWEPPIGTHTGWLRAEEMTGSPDRLLLIWGFMCRAMYSCHLDACARNLQFNFLMKVGHHNQHQYWAWCEQCLDCKSWDTNASSKLEFNYETLTDLTGHPPQRPDVFFCDDCVAYCEFLKHTSPLDRWYEPRPRRLGQWVKSLGSGNPPACFEWCYIRYDCWYCNVVPIEHTEDPMHWHENWDNNCIGQQHWINVMCQMMTPNNAGIHPVRPCIHPDDNVRMPYECHNMEPERVQFVDQVTGAPYRANATLPCDHDGFEAFMAPDLTETYVQDQKYCKGVPFQMSKPNQASIPLWSYILYSCEMACIEIYIMKGWMLKQSFHGSPHKTVTCIGTHCMIRHQACCNNDKFAVANRAHEFRWYWARLNGQKMIEFFESFRDMIKISPCMRWRDDAPGSGLHIWAAHIFMEVEKLVWTLAIMNCAYAAYPVMEPHPLGWVDTGYVKSHFQLAYSICFCGQIINRIMILQARYQYVAPATCRLHSCGDDAALTPVNWSFNMGHGMPNINYILNWNRKRWGNFRHQMHIPPGQQCRCWRALKDDNVMHEDTT
//QVPFPTVDVIVCCTGIKCEPMNVGYDQQMKDCFICTREYDIRRLHTIVCGSEWACRLWIEADWEDCEKSFRDFDAPINIVQYAVWRANVETQCPGYLNRTQWIMIGYWFIGTWNAVLIVPKSPAQIETDGIVYKIPCNRYFEHGPYFWRSPWAGPYPTVDRHDSVCHGHLKYGSLPSCQNWEFARPHDLGDACMWEKPQLQLNWNPRPRAIISTGTFSPEQTFWDGMPWKYFWKCPSSVQANKRLYKVLTVVCRQENHGYKETHRKFHIKCLVGQLNQPKPWCVYCVVYRSDYPPPQRWTFWGTPQYIMCFVKPHKLSDESAIGNWWNIGPCDRLVASAWEHCKRLGWYPHGWAKSMFPHMNIMGCSRKFRKASIEWPIMSHVGYCAHWHPFSRRVQFESNINQSLRWVVMSSFKDTDDHVALVCLTPAGEIPVTNVGQALAEQSYRIWSAQEHRAPFTGWMNLFCSIGMTMYIEKCSREPIIKDHDCFNDTADPSDTKVTSWMRKYWIEEDPTWRSNMIHMMGSIFSCNRMSNFMCYPESVRADWPIELWPGRLAIGFMNMGVASLEHYFPFIGFWVDYAPSPSEEHQWRHDAYAYDEVYAMVPMDCKLEGQTYTQCMMWKIDLVLLWSGNSEICIEQHESFSRSIYGHVSKAQAVMKYARRGPAHEQFVTGKSQHSQDCTHISPKIMLHSSIRIVAKHDMLRKEPHSDYHMLKTEFQDKYERMTTMMWGFPDWELPHTEQRHKLAGEVRQATASHYQQYYKPDHGTHEYVCPQPCLIAPWASGTPEFEMAYQLTCNGMFAKCYNRRTGQQVLQISVSHSCMRTKMANWYPSMDMFLEMSNGNADLASNRIGHFSYGHEFVEHPNVMWRPDGGRCHGHEAICNGLAYQYMWPVYHNRCNAKWVEVVHHQDSNFLPMIHGAGSHLHHQLAICYLLVCPVTGARCVGENLINFLVIICNWELIVFLIIEMVAEGLRRPMRNKCQATSFNLETYFRKKRMQCTLNRPYMTRTRRPHLWGPELRATNKQRDLPVTAVPCNQAQCKKFWGGVQDQSNDDVNWRDTKWDFSWGFSPAKVHWHQCVYDQGFHNLEYNPCLHWIWYMYTWMIAFERTVGKACHNWEQIPIDSLNNFQVHTDIWIELHCMNMSPYAFVNYSTCNAVAAKWYLELAIAHQSEPQKWFYFVSFILDSRFSPHNMVFYATSDGYRDKLKPLEFDIMMKRGTWTPEHWQSFTPHRKISPVHSTGIHEAVDIYQYFHEPFAMEPACKCMVMIYTVAIVHFKCIANHEVSGGTEINLVRCFHIWHCEEWKYMCHSWFEYNAIFRCEAMLCWKLFCGQSPIDMLTVEVKILWAVTPQMIACADAYLRPFMDWIGAFSLCQQTFCDLFAWPPQVQRFYWTVKEVEEQWYSHWVGKSVNINSSSDHNNRWVLWPYFKLLFNVANHQPDHCREAVWYNVASDRPHVFCMMAGGVPQKTMINQFRHSIIFSVQNPHFYGMQPTWCSERVALVCPKWHAPNAIPPPKFMHARAFWAVPTKCVYQEHDHYWHNHKTSHFPGTSPDIYEVRAQFRSAETHNHPYNDYKPLMFVKTHITIAKFIGGKMHMMGTQGYAMRPCDWESKMMVTFVKVVPPALTCIFFIPAQPHTMTGWALYDRYMVCRMCHEVEPCKWFVIDVDHNQNDSIMRSHPSERGTTGICDQKHHNLQHCNWELDGPPEISMTYPILNSELDLGWYHLWCGDGPMHPKFGRDRGVTEWKVTIKTPFNLAPTIENIDAQSITRWSQYMINKADMWQLQRVPHKCTPKDCYFGQQSFNERELCIWLADPLMAIAMFYKPLVDPPIEMEPKIESFAMYKAVPKSGSWIVVQIIYTPETTGWIEHYDTSTWTNQRHPLLLGWFSMWSCFENIFAWESMKKMTDYAKEPTMRRAAIWLGEDSQQMSSYFVHHKCCRHYNEHLRLLVPCSVIQRCQQDKWNESCQWHHPDPREPWQFGIKKPSYAWWDLLNTCAPFYPDHKNTYCCKMANRAASQDWKSNGDRHNAPVIRMENMYKSVPERPDTSKNDQHPDMFTENTQTIVFCHHDIGWCWLGHIQYSCCHYACVIICIEMLKPLCNWMHRIESQCTIVNQSFASRTTCQDQSFYLIYEMFVIAYEIWDKNAPQMFPYYYYWRWVDRTDCHVQDETDGGCWTKEDCAGCSCSRELSYIEERGYYWVFPYSRTVQAVMMEHVPGWCYMSGVFLKLHPLFHYDIHQTYIMRAVPTEWTQDMPKDHDWKLYQWDLQRKWSYQVGDELDVGPGCLRPAVAAAYFQTTCILCATAYEDYSEKNKEYRHYTACMSGGLFNHGQMESYKFDWMDWHRQGGDEKPDGGDIEHCYYCSNEASYTPATYGYMCNENGSALGRFMVMFVRMFVRASCSNRDLGDRWQWIFTDYWHCDNERAGCEKDMNQNFGGHWPLDYCFEFGWPCCEQRDCMHLCMCSYMVRVSQDFKSIWDERLGMIRDWRFFVSRNLQCMAWTTYKMEFCLQTYSQFILPARLQEVCDGLWLSDCHNYNWGRIMKWGQLKKVMVPRWEMMIAMRWDTRERWMYYVSHSDAEVAEPSVELNLGGMHAIKSTTWMWVKSTKTCRECMNNIYSVFTTCKKKIAMTFTHKPIKHDKPHTFRCMSNQTEPVCHCHDFHCIWKGFGLMHSGLESQFVDIHCKRPWIIHDKRQHSLGIAALKTCYCGVRKNGRGAQTNGRETGDGAEGIQLQIHLHAVRLKVVAHFSNAVLYDGSKRYMENQKHHMTLKSPSNMPYTNGCENGWYRPCHVQAYVANADFASPLEPMVYTKWWDEGSSWLKNRRGCQATQKSQKPKSMRELWLVTHLVGAHEGNCDHRLLFQYPRWIFHSNKYPDGWKHAHRAWDPDSYGDFWVKHGHHDLLLACKEEVLCTLYNFCKQELENLGWVCCVLMNVCWISHFGNGNYPYWHHRHWLHMENDCDIAEELKRVQGYLYRHKWWVGWELCDFFQANQDNHESRLQRLHQHRLTHNHCRFPKVRQQDIAVFWEVVSICGANRLVHIFACMIIKDAHMVERVHNLCDPTWWPQHLAMNSMGWYMQKLVEFMTPCGNLWSRKFCQIQMHGWVYFPRHWWYSIPDEAMVGVRNNESTASVIRVYFDEDINPTNSNPNRKPENHCKELLLNMMGCVRCAFNRKLTPHKEQSVSYMFIHQCYPLCAYNMRCMTTRCESHMTHEFQPGWRRQMETLVICRDAIVQFVMTVMIKRRMTDYSMSITYQEWTFKCLRHNFALRCKSGCAFVLEDQDVQLHGLPMKWYAMFNDMYMFKCIRTYIDEYASPDYNWNQPRWLITYATNTGSHAKTRQSNENCRRRIFYDYNRGMWLVLCTRERIHWWSLPYRKVHVLIPGHISASEHYQNLNNPPMYKAGMAEKSPGWQVTICRIEDVRPFDDDHLYGDEQEVHNSGCAQDSVHVKKMTPVLIDCGDRPIEWTCFQADYYNKPTHRFWRPDVKHPLNKYCHGGCDPDSNRSYCKWEDTCEDTTIKYSRTHSDFNVGSMATKYIDREHNKGSEKWFEGLGQRCNQPGEMKVNFTLEIMTFKPRMRSFDHEPESAMHNQYEFLNDGTTCMGFEKKGIHFFYKNICRNLQQYQCHCPLCYRMLPGQCECQNIIVSPRSVLQHLNCKQNENMKTSSACHRKIMHYKMKIYGVSIERRDQTFAVRMPNFECECWDMWEGSSWLKKWIHRCNDCNLDAPLERPAHFKHDSFWCTFGIWLQYCCCYSGFFCSMAHMMNYCLWCWEPLFPDKWDEYFSLTYDGVEGWCHDLIEQIDGEMLYGLTIPEIMPEGYPRVADDHFPYPEPSDDDSHNDKSEKKRSYLIPSFWQACHCCHFKTQQKCWACNSRIYLEADWLKHAILPIGRRLKRVVTKMHRQVERPVSLMRTFFNPVGCPDTSDNTGLPDLMNWVGQGITVGQCWHETIYGLSAVCWSPMLNTQTAEWTGGKYKTMDGGIARKEGYLGVKKLTQFGDTAWCTWEGHCDTWMRDYMMHWWYATEDMYQKLIGIG
//Output:
//1387

//QVPFPTVDVIVCCTGIKCEPMNV-GYDQQMKDCFICTREYDIRRLHTIVCGSEW-ACRLWIEADWEDCEKSFRD-FDAPINI-VQYAVWRANVETQCPGYLNRTQWIMIGYWFIGTW-NAVLIVPKSPAQIETDGIVYKIPCNRYFEHGPYF-WRS-PWAGPYPTV-DR-HD-SVCHGHLKYGSLPS-CQNWEFARPHDLGDAC-M--WEKPQLQLNWNPRPRAIISTGTFSPEQTFWDGMPWKYFWKCPSSVQANKRLYKVLTVVCRQENHGYKETHRKFHIKCLVGQLNQPKPWCVYCVVYRSDYPPPQRWT-FWG--TPQ-YIMCFVKPHKLSDESAIGNWWNIG-PCDRLVASAWEHCKRLGWYPHGWAK-SM---FPHMNIMGCSRKF-R-KASIEWPIMSHVGYCAH-WHP-FSRRVQFES--NINQSLRWVVMSSFKDTDDHVALVCLTPAGEIPVTNVGQALAEQSYRIWSAQE--H-RAPFTGWMNLFCS-IGMTM-YIEKCSREPIIKDHDC-FNDT-ADPSDTKVTSWMRKYWIEE-DPTWRSNMIHMMGSIFSCNRMSNFMC-YPESVRADWPIELWPGRLAIGFMNMGVASLEHYFPFIG-FWVDYAPSPSEEHQWRHDAYAYDEVYAMVPMDCKLE-GQTYT-Q-CMMWKIDLV-LLWSGNSEICIEQHESFSRSIYGHVSKAQAVMKYARRGPAHEQFVTGKSQHSQDCTHISPKIMLHSSIRIVAKHDMLRKEP-H--SDYHMLKTEFQDKYERMTTMMWG-FPDW-ELPHTEQRHKLAGEVRQATASHYQQYYKPDHGTHEYVC-PQ-PCLIAPWASGTPEFEMAYQL-TCNGMFAKCYNRRTGQQVLQISVSHSCMRTKMANWYPSMDMF-LE-MS-NGNADLASNRIGHFS---Y-GHEFVEHPNVMWRPDGGRCHGHEAICNGLAYQYMWPVYHNRC-NAKW-VEVV-HHQDSNFLP-MIHGAGSHL-H-HQLAIC-YL-LVCPVTGAR--CVGENLINFLVIICNWELIVFLIIEMVAEGLRRPMRNKC-QATSFNLETYFRKKRMQCTLNRPYMTRTRRP-HLW-GPELRATNKQRDL--PV--TAVPC--NQA---Q--C--K-K-FW--GG-VQDQ-SN--DDVNW-RD--TKW-DF--SWGFSPAKV-HWHQCV-YDQGFHNLEYNPCLHW--I--WYMYTWMIA----FERTVGKACHN-W---EQIPIDSLNNFQVHTDIWIELHC-MN-MSPYA-FVNYSTCNAVAAKWYLELAIAHQSEPQKWF-YFVS-F-ILD-SRFS-P-H--NMVFYAT--SDGYRD-K-LKPLEFDIMM-KRGTWTPE-HWQSFTPHRKISPVHSTGIHEAVDIYQYFHEPFAMEP-ACKCMVMIYTVAIVH-FKCIANH-EVSGGTEI-N-LVRCFHIWHCEEWK-YMCHSWFEYNAIFR--C-EAMLCWKLFC--GQSPIDMLTVEVKILWAVTPQMIACADAYLRPFMDWIGAFSLCQQTFCDLFAWPPQVQRFYWTVKEVEEQWY-S-H--WVGKSVNINSSSDHNNRWVLWPYFKLLFNVANH-QPDHCREAVW-YNVASDRPHV-FCMMAGGVPQKTMINQFRHSIIFSVQNPHFYGMQPTWCSERVALVCPKWHAPNAIPPPKFMHARAFWAVPTKCVYQEHDHY-WH-NH-KTSHF-PGTSPDIYEVR-A-QFR-SAETHNHPYNDYKPLMFVK--T-HITIAKFIGGKMHMM-GTQG-YA-M-RPCDWESKMMVTFVKVVPPALTCIF-FIPA-QPHTMTGWALYDRY-M-V-C-RMC-HEVEPC-KWFVIDVDH-NQNDSIMRSHPSERGTTG--ICDQKHHNLQHCNWELDGPPEISMTYPILN-SELDLGWYHLWCGDGPMHPKFGRDRGVTEWKVTIKTPFNLAPTIENIDAQSITRWSQYMINKADMWQLQRVPHKCT-P-KDCYFGQQSFNER---EL-C--IWLADPLMAIAMFY--KP-L-V-D--PPIE-MEPKIESFA-MYKA-V-PKSGS---WIVVQIIYTPETTGWIEHYDT-STWTNQRHPLLLGWFSMWSCFENIFAWESMKKMTDYAKEPTMRRAAIWLGEDSQQMSSYFVHHKCCRHYNEHLRLLVPCSVIQRCQQDKWNESCQWHHPDPREPWQFGIKKPSYAWWDLLNTCAPFYPDHKNTYCCKMANRAASQDWKSNGDRHNAPVIRME--------NMYKSVPERPDT------S-K-ND-----Q--HPDMFTENTQ-----TIVFCHHDIGWCWLGHIQYSCCHYACVIICIEMLKPLCNWMHRIESQCTIVNQSFASRTTCQDQSF--YLIYEMFVIAYEIWDKNAPQMFPYYYYWRWVDRTDCHVQDETDGGCWTKEDCAGCSCSRELSYIEERGYYWVFPYSRTVQAVMMEHVPGWCYMSGVFLKLHPLF-HYDIHQT-YIMRAVPTEWT-QDMPKD-HDWKLYQWDLQRKW-SYQVGDELDVG-PGCLRPAVAAAYFQTTC-ILCA-TAYEDYSEKNKEYRHYTACMSGGL-FN-HG-QMESYK-FDW-MDWHRQGGDEKPDGGD-IEH-CYYCS-NEASYTPATY-G-YMCN-ENGSALGRFMVMFVRMFVRASCSNRDLGDRWQWIFTDYWHCDNERAGCEKDMNQNFGGHWPLDYCF-EF--G-WPC-CEQRDCMHLCMCSYMVRVSQ-DFKSIWDERLGMIRDWRFFVSRNLQCMAWTTYKMEFCLQTYSQFILPAR-LQ-E-VCDGLWLSDCHNYNWGRIMKWGQLKKVMVPRW-EMMIAMRWDTRERWMYYVSHSDAEVAEPSVE-L-NLGGMHAIKSTTWMWVKSTKTC-RECMNNIYSVFTTCKKKIAMTFTHKP-I-KHDKPHTFRCMSNQTEPVCHCHDFHCIWKGFGLMHSGLESQFVDIHCKRPWIIHDKRQHSLGIAALKTCYC-GVRKNGRG-AQTNGR-ETGDGAEGIQLQIHLHAVRLKVVAHFSNAVLYDGSKRYMENQKHHMTLKSP--SNMPYTN-G--CENGWYRPCHVQAYVANADFASPLEPMVYTKWWDEGSSWLKNRRGCQATQKSQKPKSMRELW-L-VTHL-VGAHEGNCDHRLLFQYPRW--IFHSNKYPDGWKHAHRA-WDP-D-SYGDF-WVKHGHHDLLLACKEEVLCTL-Y---NFCKQEL-ENLGWVCCVL-MNV-C--WISHFGNGNYPYWHHRHWLHMENDCD-IAEELKRVQGYLYRHKWW-VG-WELC--DF-FQANQD-N-H-ES-RLQRLHQHR-L-TH-NHCRFPKVRQQDIAVFWEVVSICGANRLVHIFACMIIKDAHMV-ERVHNLCDPTWWPQHLAMNSMGWYMQKLVEFMTPCGNLWSRKFCQIQMHGW-VYF-PRHWWYSI-PDEAMVGVRNNESTASVIRVYFDEDINPT-NSNPNRKPENHCKELLLNMMGCVRCAFNRKLTPHKEQSVSY-MFIHQ-CYPLCAYNMRCMTTRCESHMTHEFQPGWRRQMETLVICRDAIVQFVMTVMIKRRMTDYSMSITYQEWTFKCLRHNFALRCKSGC-AFVLEDQDVQ-LHGL-PM-----KWYA-MFNDMY-M-F--KCIRTYIDEYASPDYNWNQPRWLITYATNTGSHAKTRQSNE-NC-RRRIF-YDY-NRGMWLV---LCTRERIH-WWSLPYRKVHVLIPGHISASEHYQNLNNPPMY-KAGMAEK-SPGWQ-VTICRIEDVRPFDDDHLYGDEQEVHNSGCAQDSVHVKKMTPVLIDCGDRP-IEWTCFQADY-YNKPTHRFWRPDV-KHP--LNKYCHGGCDPDSNRSYCKWEDTCEDTTIKYSRTHSDFNVGSMATKYIDR--EHNKGSE-KWFEG-LG-QR--CNQPGEMKVNF-TLEIMTFKPRMRSFD-HEPESAMHNQY-EFLNDGTTC-MGFE-K-KGIHFFYKNICRNLQQYQCHCPLCYRMLPGQC-ECQNII-VS-PRSVLQ-HLNCKQN-ENMK--TSSACHRKIMHYKMKIYGV-SIERRDQTFAVRMPNFECECWDMWEGSSWLKKWIHRCNDCNLDAPLERPA-H-FKHDSFWCTFGIWLQ-YCCCYSGFFCSMAHMMNYCLWCWEPLFPDKWDEYFSLTYDGVEGWCHDLIEQIDGEMLYGLT-I-PEIMPEGYPRVADDHFPYPEPSDDDSHNDKSEKKRSYLIPSFWQACHCCHFKTQQKC--WACNS-RIYLEADWLKHAILPIGRRLKRVVTKMH-RQVERPVSLMRTFFNPVGCPDT---SDNTGLPDLMNWVGQ--G-ITVGQCWHETIYGLSAVCWSPMLNTQTAEWTGGKYK-TMDGGIARKEGYLGVKKLTQFGDTAWCTWEGHCDTWM-RDYMMHWWYATEDMYQKLIGIG
//        """.trimIndent()
//
//        runTest(sample, true)
//    }

    fun runTest(sample: String, useBLOSUM62: Boolean = false) {
        val reader = sample.reader()
        val lines = reader.readLines()
        val i = lines[1]
        val j = lines[2]
        val k = lines[3]

        val multi = MultipleLongestCommonSubsequence(i, j, k)
        val scoreResult = multi.score()
        val strings = multi.outputStrings()

        val scoreExpected = lines[5].toInt()
        val iExpected = lines[6]
        val jExpected = lines[7]
        val kExpected = lines[8]
        
        val iResult = strings.first
        val jResult = strings.second
        val kResult = strings.third

        println("E $iExpected")
        println("E $jExpected")
        println("E $kExpected")

        println("R $iResult")
        println("R $jResult")
        println("R $kResult")
    }

}