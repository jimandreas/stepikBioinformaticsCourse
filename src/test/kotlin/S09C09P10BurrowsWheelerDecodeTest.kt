@file:Suppress(
    "UNUSED_VARIABLE", "MemberVisibilityCanBePrivate", "UNUSED_PARAMETER", "unused",
    "ReplaceManualRangeWithIndicesCalls", "ReplaceSizeZeroCheckWithIsEmpty", "SameParameterValue", "UnnecessaryVariable"
)

import algorithms.BurrowsWheelerTransform
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Test
import kotlin.test.assertEquals

internal class S09C09P10BurrowsWheelerDecodeTest {

    lateinit var bwt: BurrowsWheelerTransform

    @BeforeEach
    fun setUp() {
        bwt = BurrowsWheelerTransform()
    }
    /**
     * Construct the Burrows-Wheeler transform of a string.
     * Stepik: https://stepik.org/lesson/240382/step/10?unit=212728
     * Rosalind: https://rosalind.info/problems/ba9j/
     *
     * String Compression and the Burrows-Wheeler Transform (4/10)
     * https://www.youtube.com/watch?v=G7YBi04HOEY
     *
     * Inverting Burrows-Wheeler (5/10)
     * https://www.youtube.com/watch?v=DqdjbK68l3s
     *
     * Using Burrows-Wheeler for Pattern Matching (6/10)
     * https://www.youtube.com/watch?v=z5EDLODQPtg
     *
     * See also:
     * https://en.wikipedia.org/wiki/Burrows%E2%80%93Wheeler_transform
     *
     * Compute Burrows-Wheeler Transform Written by Bernhard Haubold
     * http://guanine.evolbio.mpg.de/cgi-bin/bwt/bwt.cgi.pl
     */


    /**

    Inverse Burrows-Wheeler Transform Problem: Reconstruct a string from its Burrows-Wheeler transform.

    Input: A string Transform (with a single "$" symbol).
    Output: The string Text such that BWT(Text) = Transform.

    Code Challenge: Solve the Inverse Burrows-Wheeler Transform Problem.
     */

    @Test
    @DisplayName("Burrows Wheeler Decode Sample Test")
    fun burrowsWheelerDecodeSampleTest() {

        val inputString = "enwvpeoseu\$llt"
        val result = bwt.bwtDecode(inputString)
        val expectedResult = "twelveplusone$"
        assertEquals(expectedResult, result)

        val inputString2 = "ard\$rcaaaabb"
        val result2 = bwt.bwtDecode(inputString2)
        val expectedResult2 = "abracadabra$"
        assertEquals(expectedResult2, result2)

        val inputString3 = "TTCCTAACG\$A"
        val result3 = bwt.bwtDecode(inputString3)
        val expectedResult3 = "TACATCACGT$"
        assertEquals(expectedResult3, result3)

    }

    @Test
    @DisplayName("Burrows Wheeler Decode Simple Test")
    fun burrowsWheelerDecodeSimpleTest() {

        val inputString = "ABAC$"
        val encodedString = bwt.bwtEncode(inputString)
        //println(encodedString)

        val result = bwt.bwtDecode(encodedString)
        //println(result)

        val expectedResult = inputString
        assertEquals(expectedResult, result)

    }

    @Test
    @DisplayName("Burrows Wheeler Decode Stepik Quiz Test")
    fun burrowsWheelerDecodeStepikQuizTest() {

        val inputString = "TGGTTGACTCACTACCGACGCTTGCACTTCCCCCGGCTGGATTTTAAACAGACGACCTGGGGAATTTCGTAAAGGACTAGATATAGGTGCGCATATTTGTATCGGGTATTGTATACGGATGAACCGGCTCGGAATCATGCACCACGCTGCTCCTTCGCGACCTTATCCGAAACAGCTAACTGAAGATTAGTGTATTGTCCGACGGCAGCAAACACCGATC\$ATCAAGCTGCCTCCTAAGGGAGGGGGTTTGTAGGCAGTACTCGTCGACTACTCTGCTACCCTTTGACCCGGTTCATTTACTCGTGGTCCACGCCACTATGGGGACGCTTTTTAGACGATGGGATCCACCCCCACGAAGACACGCGCACTTCCGAATTGTTATTGAGCAGGTGCGATTAAAACAGGGGACTCAGGGCGAATGCAGTACACGAGCCATCTCGATGAATACAGTAAATTGGTGTTTACAGCTGATAGATTTGCCTATAGTCGAACTCGTTATATCACGTGCGCCATGATGTTGGGGGCGTGATACGGCATGGTGCCATGACATTCTAAGCATGGTTGCTAGTTAGGCAATTGTAACTTCTTTTACTAGACCCGTCTCCTAGATACGCAATTATGAGATCGGGGGTTTATGATGATTAACAAGAAACTTGATACTCGTTACGTCAATCCGACGTAGGACCCCGGTTCTATGACTGACCGGCGTATGCACTCCTACCAGAATGAATACTCAACTAACGCACTGGAGCATTTTAATTTAGCAACAGAAAGTATACCATTAACTTCCTCGACGGCCGAACTGGAGTGCGAGTGGTTCAATGACACACGCGGCGACTAGGTTTAGAAGTCTATTTACTAGGGCAGATCTTCCGTCGG"

        val result = bwt.bwtDecode(inputString)
        //println(result)

        // accepted answer
        val expectedResult = "ATTGAAGGCTGGGATGGGGCCCCCTTCACTAGGACGTCCATAAGACGAGAGGCGCTGTTATCTCAGTATTGCTTTGCGAAACTGGGCCAGTTCCCCGGTAATCAGGGCGGCGAATTTCCTTTTGCACATAGACCGCAGTCTCATACAGGCTCAAATGGCCTGGCGCGGGCTGGACTACTGCTCTGCCAGTCGTGGGCGAACCTTTGCTGGCCAACCGGCTGGACTTATCACTACAGGTGGTGATCCATTAATCATGGGTGTCTACTCATCCAACCATGCTAGGCAATTCATGATGCCGGTTCCATTACCAACTCATTGTACTGGTATCCATATGACTTGACTGAGAATTTCAGTTAAATGTTGAAAATGACATGTTGACGGAGCAGCTAGAGTTGTGGCTACTCCAAATCCTATGATATCCTCCTAGCCGGCAACAGCAGAGAGATGATTCAAGAGTATGAATGTCTATCGAGCAGTTTCCGTAGAATGCACCTGCCGCCCGTACTCCGCATGCAGGGAACTCAGCAAGGAATAAACAATCGGTTTTGCCTTGGAGCTCTAATATAACGCTTACGTCAACGCAAATCCCAGGTTAGTGGCGTAGACAAGATGCTAAACCCGCAAGGGCTCGTAACGCTATGAGCTAGTTTTTCTACCTTAATAGAATACGCTCGTTGTTAGAAAATACTCCTGATACGCCCCGATCTAAGTTGTGTGTGTGACTTTGACGGTGGTGGCCGGACAAGCAAGCTTTAAATCCCCATGATGAGGTGTAGTAGTCCATTGAACCCAAGAAGGATCCGCAATTAAGACCGATCTGTATTCTTAGTGCAATGGTGTACAGTTTGGTCACTTAATTGCAGCCGCCCCAGGAGTTAT\$"
        assertEquals(expectedResult, result)

    }

    @Test
    @DisplayName("Burrows Wheeler Decode Rosalind Quiz Test")
    fun burrowsWheelerDecodeRosalindQuizTest() {

        val inputString = "GTCGAACCGGTACAGTTTTATATGAACGCAGATCGAG\$AGTACTTAGGTTATGGCCAAGCCGTGGCACCATCGCGCTAGTATTGAGGCGTGTTACGCGTAAACCAAAGCCTCAGTCAAGGCTGCGCCGTTCGGACTAGAAAAAGAATCTGGAATTTAAGATTCCGACCGTTGACTTAAATTCGTTACGTTACGGGAGCATCACCACCACGGTAGCGGCGGCATCCCCCAATGGTCAATCTTACACTCAGAGCCTCTGGGATGAGAAGGCCATCACGAGACCGGGGTCACGATCTGTAATTGGATACCGGGCAACCGAACTTCCTATATATGTTAGAAGCAAGGTCCATGTTCGGTGCGGTCAGCGGTGCTGGTCAGACAACTCAGTTTAGCGTTGTAGCGTTTTTATGGCTCGGGATTACCTCGGACGGTAAAGGGAAAAAGACACTCTCCCGGACTGAGCCCGCCAGGTTAGCACTCTCTAGCGTGAAGCCCAGACGACCTCCGCAGCTTATTTACTAACCATGGGCGTGGCCGAACCCGAGGGTGAGACCCAGGCATAGGCCGTGGGTTGATGCCTGGACCCTGGGTGCAACTATCCCGTGAAGTATGACGATGATAAGGAAATCTAGCAAATGCGCCAAATTGGGCGCAGACAAGTGGTTTCAAGGGTCCACACTTGAATTTTACCGTAGCGCAGTGTATTGATCAGTGACCCTTCCCGAATGTAATCTCTGTTGCTCATCGAAGGCGAGAAGAATCACAGGGAGATCCGTTGACTACTTGCCAAAGCAACTTGAGTATGGCGCACCCGGGCGGTTGCTACGATGTCAACCTACACTCGCAAAAATACCGACCATTC"

        val result = bwt.bwtDecode(inputString)
        //println(result)

        // accepted answer
        val expectedResult = "AAGCTTCCAGAGTCGCCGTCAGATTGAGTAAAAAGGGACATCTCTTCCTCTCAATTCAGCGAATCAGTGGCTAGAGAGCCCAGATCTACCCTGTCGGGAATGGGCTCGCGGCTACCCTATCGCAGTCGCATCATGTATAGTAGTAGGGACTTAGGGCTTTAATAGCAATCTGGATCTCCATTGGGGGCTGAGGGGCTATCGCAGACGGGCATGCGACCTAAGAACTCGAAGCTGCAGGGATATCACATGGCTTCCCAATTTAGTGGTCCCGCGGGCGCCCGGGAGATCTAAATGCCCGGGTGTTAAGGTCACAGAAACGTAGCATGATCGAAGTCGGACGAACTTTTTGGGATTGCCAAACGTAAGGTGTTACATATAATAACACGCTGCCACTTCGACACACCTTATTCACTATCACCAAACCCGAGCCGATTGGCGATTAGCGGACCATTCGAACGAGGCAATCTCAAGGGTGTAAAGAAAGGTTTACGACGACCGTCGATTAGGTGCTATTTCTACTTGAGACAACTGCCATGGATCGTGGGAGTGGGTAGAAAAGCTCTAGTTATAGGTCTCCTGTGTTAAGGCGCGCTTAAATACGACGCACTTTCCCGATTCCCTGTACGAAGTACGGGCGCGCAGTATAATACCCCAACGTCTGGAAACTGGTCTCGACCGCTTACCAAAGCTTTATGAGCTAACCAGCCACGAGGGGTCTCCCATGCGCCGCGCGGCGTGAGACATTGCCACATCGTCCTGAAGCGGCGAGATTGGCATAACCGGCGAGTTGACACACTTCTGTCGTTAGGTGAAGGAATCGGCGCTTTACAAGCCGCCAAAACAGTGCCACTAAATGGAG\$"
        assertEquals(expectedResult, result)

    }

}