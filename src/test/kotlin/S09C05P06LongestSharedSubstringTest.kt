@file:Suppress(
    "UNUSED_VARIABLE", "MemberVisibilityCanBePrivate", "UNUSED_PARAMETER", "unused",
    "ReplaceManualRangeWithIndicesCalls", "ReplaceSizeZeroCheckWithIsEmpty", "SameParameterValue", "UnnecessaryVariable"
)

import algorithms.PatternMatchingSuffixTrees
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Test
import kotlin.test.assertEquals


internal class S09C05P06LongestSharedSubstringTest {

    lateinit var pmst: PatternMatchingSuffixTrees

    @BeforeEach
    fun setUp() {
        pmst = PatternMatchingSuffixTrees()
    }

    /**
     * Longest Shared Substring Problem: Find the longest substring shared by two strings.
     *
     * Input: Strings Text1 and Text2.
     * Output: The longest substring that occurs in both Text1 and Text2.
     * Code Challenge: Solve the Longest Shared Substring Problem.
     */

    @Test
    @DisplayName("Longest Shared Substring Sample Test")
    fun longestSharedSubstringSampleTest() {

        val inputString1 = "TCGGTAGATTGCGCCCACTC$"
        val inputString2 = "AGGGGCTCGCAGTGTAAGAA#"

//        val expectedResult = "AGA"
        val expectedResult = "CGC"  // what was found
        pmst.createSuffixTree(inputString1, inputString2)
        val result = pmst.longestSharedString()
        //println(result)
        assertEquals(expectedResult, result)

//        pmst.createSuffixTree(inputString)

//        val theTree = pmst.printTreeDebug(pmst.root)
//        println(theTree.joinToString(" "))


    }

    @Test
    @DisplayName("Longest Shared Substring Experiment Test")
    fun longestSharedSubstringExperimentTest() {

        var inputString1 = "ABC$"
        var inputString2 = "DAB#"
        var expectedResult = "AB"
        pmst.createSuffixTree(inputString1, inputString2)

//        val theTree = pmst.printTreeDebug(pmst.root)
//        println(theTree.joinToString(" "))

        var result = pmst.longestSharedString()
        //println(result)
        assertEquals(expectedResult, result)

        inputString1 = "ABC$"
        inputString2 = "ABD#"
        expectedResult = "AB"
        pmst.createSuffixTree(inputString1, inputString2)
        result = pmst.longestSharedString()
        //println(result)
        assertEquals(expectedResult, result)

        inputString1 = "ABCAAAA$"
        inputString2 = "BBABCBB#"
        expectedResult = "ABC"
        pmst.createSuffixTree(inputString1, inputString2)
        result = pmst.longestSharedString()
        //println(result)
        assertEquals(expectedResult, result)

    }

    @Test
    @DisplayName("Longest Shared Substring Rosalind Quiz Test")
    fun longestSharedSubstringRosalindQuizTest() {

        val inputString1 =
            "AGAACGATTGAAACACACATTACTGTTGTCTTTCTAATAATTCTAGAGTGGACTCAATAGCGCATGGTTTTTAAGCATGCTGCTATTCGTACGACTCTTTGAGATCTATTCACTGGGTCATACTTTTTGTCGGCCCCCCCGATCGCCGCCTCCGTTCGCGAGGTCTGTACGCTGAGCATCTTGGTGCATGCGTGTATCTGACCTAAAATAAACAGGACGTCGAGACCGGAAGTCGTGTCTAGGTACGAGTCACCGCCCCTGACCATATCTCCAACTGTACTAGCTCATCCCCGTGTGCGGACGCACTTTTGTCTGAAAATCTCCTCGTTAACGGTGACGGGCAGTGGTTAGTCCCCGCTATCAAATTCTGGGTCTGGTCAGATCGGTTTATCAGCTTGAACATCTCCTTGTGTACAAGGAGCTACACCATACCAACAGTCGAAACCGGGGAAGCGATTTCCTTTACAATTGGAGACATAGCGGACATACTCACGTTCGAATTAGACTTATCGTCATAGCTTCTACTCACCGTTGTCGTCATGTCACCAGTCCCTGGGCACGGTCTAAACCCGCGGATGATGTTCCCAGAATTCCACAAACTTTAGATATTTACTCTCCGGGCGAAGTTAGTATGAGGCCAATCCTTTAACTGTGGTAACCTCATCTAGGCTGCGACTGATAGCTCCAACATACAGCCTACCCGTATCAGTCTGACCATCCATCCGTTCACACTCGATTCGCCCCCGAGAGCGATGTTTCAATACTGGATTAGTCGAGTCGCGTCCGATTGACTCCTAGCTAGTTATATGGAGGTGAGAAGACGAGGAAACCTAAGCCAGGAACTTTGTAACGGTGTCATATGTTTTCTGTCGACATTTGAGAATTAATGCGGACAAAGCATCTGAAATTACAACGTAAGGGGGGCATGACAAGCACTAGGCGGCCGTCTGTTTCGCGAGATCCGTTACTATTTGAGCACTGGCGGTCGTATAGTTCGCTT$"
        val inputString2 =
            "GAAGAGACTTAGCCCATACCATCGCACCCAGGTAGTAGTAGTGCAACTAGTTAGTGTATTGGGAGGTCCATCTAAGAACGGGAAGTCAGAACCACGGTGTGACTAATTCGACAAGATACGATTACGACCATCACCACGTGCATGGTTGGTCGTACCGCCAAGTGGGCCTTTACACGGGACCATCCAGACCTTCTATTAGTGTAGACAGGCACGATCGCTAATGGCATTGATGAGTAATCCGGGGATGGCAGCGAGCGCCCAGGGCTCAAAGGTCAGCAAAGAGAGCGTCAGACAAGCCTTGCCTAAGAGCATTGTCGGTCGATATGGCGCCGCCGCGTGTTTTAGGTGCAACAATTTACGGTATTTTTGGGAATCCGCATCGTTGAAACGGAATTGTCTTTTTAAACCGTGTCTGCTCGCGCCATTCGTGAACCAAGTCAGATTTTCATCCGACTCAGATACAATCTGTAGTCTAGGATAGGCAATCTAAATGCTTTGATGAGGCATCAGTACGCACATACTAGTTCTTGCATGGTTGAGCCACAATGATCAAGAGGAGTTATCAAGGCGAAGGGAAAATGAAGAGTTATCAACATGCGGAATGACTAAGCGGGGGGGCACAGGAGGGACCCAATTTTTTGGATGCCTAAGTCAGCGTGTCCCTGCCTTGTTGATAAGAACGCAGCTCATGGACAACATGAGGAGGGGACGAGTCGGCCAGGTTCTGCGGTCTATCCATTATAATCGTCCGTGTCGTTGGTGGCCCAAAGTCCACCGTTATCTTTGATAAGGGCATTCTCCACAACGGACCGACAATGATGAAATGCTATACTAACGTGTGCCGAGCGTCCGCGAACATCGGTTTTTAGCGGGCTCAACAGGGAGCGGAGTGTGCTGCTACCTCAAGTATAGCTTAGATAGACCCCGAAGTCGGGGGTTCGCTCCCAATAGGCGCGGTCATCACCCCCCCCGTCGCTTCCAGAAAGGTTCCCGGATCGGA#"

        pmst.createSuffixTree(inputString1, inputString2)
        val result = pmst.longestSharedString()
        //println(result)

        val expectedResult = "GACCATCCA"  // what was found
        assertEquals(expectedResult, result)
    }

    @Test
    @DisplayName("Longest Shared Substring Stepik Quiz Test")
    fun longestSharedSubstringStepikQuizTest() {

        val inputString1 =
            "CCAGATCAAGCGCGCATCACGCCACGCCAAGGATGGTAGCTATTGAGAAAGGGGATGATGATCTAGAAATACACTCCATGATTTACGAGGTGGGCCTGCACAACTATGCGAACGCTTCGAGTGGCACAGATTCATTCTTCCTGTTTACAGTATGGACTATTATTCTCAATTGCCTAGTGGTAAGACGAAATGCGGTATCGGGTTGGCTTCCTGATGGCAGCGACATGTTATCTTCCTAACCAATACTGAAGTTAAGGGTTCATACTTCCCACTGCGCCTAGGACTATGTCCGACGGAGGCTGCTTTGTCTTGTTTGCAGCACGTCGGTGTTCGGCCAAGCAGGATAGGGTCGCTTCCATAGTGGCACTGGTCACATCTATGCACTTCGCTCTTGCCCGCTGTTAACCAGCCTCTTCCTACCGATTTCAGCACAAAGGAGCCCAATCGGCGGTTATGAAAGGGTCGCCTAAACGCTTTCATTGTTTACCACGTCCGTTGGTACCTGCACTCCGTGTAAAGAGCCACCTGGCTGTTTTGACGCGGCAGTGCCGAGCACCCACAGGTTTTCAGTACAATTACTGAACAGAATCACGAGGAAGGTCGAAGTGTAAATACGTCGTGCAACAACCCTGTAGTATCAGGACTGATCATGGCATTGTACGAGCCGATTTTGTATTCTAAACCAACCTCTTCCTACACGCCATGGCTACGCACAATGATTGGATTCCCATCTTACGCTTCGCCAACGATAACGACTTGCGCACTCTATCCGGAAGATGTAAAGAATAGTTCAAACTATGACCTCGTCAACCTTATTCAATCGCCACCGGGAGACGCCCAAAGTCCCGATCGGTCCATGTGCTGTCAACTTATGGTCCGACGGAGTAATCCGAAAACTAGCTGGTGTTAGGCCATCGCTTTATCATTCGAGGCTACCCCATCGATGTATTCCATGGCACCCAATCTTCTTAGCCTCACACTCAGGGTATTAGATCATTAA#"
        val inputString2 =
            "CACACTTACCTGGGTCATAGCGGCGCAGAGATCTGCGTGTATAGCCCTTCTAACCTGTCACCCACTAACCTTCGGCACGAACTCACGGCGACAGGACTTGCATTTGCGTCTACGCACCGGGAGCATAGACTCCGCGTGCGTTGCGGATATTAGTGATATTGTAGCGAGCGTTATCTAACGTATGGCTGAGGATCATAGGATTGAGGGTTTAATAGCGATCACGGCGAGCGGAAATACAAGGGGAGGGTTCTGGAGAAGATAATATAGACGAAACACTCAAAAATCTTCGGGTCCATCCACCGTGTCCGATTATTCCAGACCTATCGACACTCGCACCGCGGTCGCTTGATACGTGCAGGTCCTGTCAGATATGTAAGGAATAACCCTCCGATAGTGGGCGTGAAATCAGCGTGGGGTGTATGGGGTGCCCACTCGTTCAGGGACGCTGATGCGGCTCATATTTCTGCCATACGGCTATTTGATAATAACTCCACAAGTTGCCGCAATGGATGATGCGATGGACTCTAGAATAAATACCGTTCTGCCTCAAAAGATAAGGCGTGCTACAAATACGTTCATACAGTATCCTGATCATTCCGGTTCCGGTTAGTTTGAGTTATCGACGTCATATGACCGTTCCAGTTTTTGGCTCCACGATCATGTATCGGCCTCCCTTAACTATTCAGCCACTGATTCGCGGTCGCTCAGAGCCGGTAACCATTACGTTACGACCGCCACCGCACGGTAGTATTGCGACTTAGAGCACCGTGATAGTGGCCTCAGACACACGAAGTACGGATATTCCTCAGAAATTCGCTGCCCCGCCGCATCCGAAGCGTGTGGCACATGGCAATACGGACTGTTGGTACAGAAACGTCCGTCCACAGGACCTTTGTAAATCAATTTGCCCGAAAGAGGATACAAGCCTTCAGTGAAGCTGGTCGGGCATATGTGACTGGCCTCGCAACATCCATAGTGTCTTCCCACTAATGTAACACGC$"

        pmst.createSuffixTree(inputString1, inputString2)
        val result = pmst.longestSharedString()
//        println(result)

        val expectedResult = "TCCATAGTG"  // what was found
        assertEquals(expectedResult, result)
    }

}