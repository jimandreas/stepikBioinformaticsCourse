@file:Suppress("SameParameterValue", "UnnecessaryVariable", "UNUSED_VARIABLE")

import util.RandomizedMotifSearch

/**
 *
Code Challenge: Implement RandomizedMotifSearch.

Input: Integers k and t, followed by a space-separated collection of strings Dna.
Output: A collection BestMotifs resulting from running
RandomizedMotifSearch(Dna, k, t) 1,000 times. Remember to use pseudocounts!

 * See also:
 * stepik: @link: https://stepik.org/lesson/240243/step/5?unit=212589
 * rosalind: @link: http://rosalind.info/problems/ba2f/
 *
 * youtube:
 * @link: https://www.youtube.com/watch?v=sUXe2G2I9IA
 * @link: https://www.youtube.com/watch?v=MP6O_Z2AUDU
 */


// TODO: RandomizedMotifSearch
fun main() {
    val rms = RandomizedMotifSearch()
    val dnaStrings = """
GGATGTGGGCAGGAGTCCCCTAGGGGGTCACTTTAATAGTGCTTTGGCGGGGAACAGCGACATATACAAACACTCGTCCGTACCGTCACTCGCCCCGCAGGTCTTTAAGCCGAGTTCTAGTATGAGATGGATACTGCTCGTCCATATGTTCCGACGGGCCTAAGGGGTAGTTTGACAAGGGTAAATTGGATGTGGGCAGGAG
TCCCCTAGGGGGTCACTTTAATAGTGCTTTGGCGGGGAACAGCGACATATACAAACACTCGTCCGGACCCGCAAGATGGATACCGTCACTCGCCCCGCAGGTCTTTAAGCCGAGTTCTAGTATGAGATGGATACTGCTCGTCCATATGTTCCGACGGGCCTAAGGGGTAGTTTGACAAGGGTAAATTGGATGTGGGCAGGAG
AGCTTGCGAACCTCGCCCGAAATCATTGCACCATAGCCGGTTATCTAGCGCGGGAGACGTTATTCCAAGATGGAAACGGGTCGAATGACTCTGTGTCGCTCGCTTCCTAGGCAGGACAGTTTTGGAATTGATAAGGCATAGCTTAGAACGACCTCTGCAGATGCGAACATTCACCATCTGAGGAAGCGGGGGTAAGTACCCT
GGAGTACTTGGTGATGAACGGTTTTTGGAGTTTACACGCGTTTTTACCTGAAAACGTCGGAGCTATAGAAGTAAATTGCCTAACTGTATACCGGTCGAAGGATTGACCTTACCTGTTAGTGTCGTGTTCAGGCCCTCAGTCTCAGCCGTCTAGAGTATGTACAACGCTAAAGCGACACGCAAGATGGAGCAGAAACCTCTCA
CCAAACCCGGAGACTCGAGCCAGGCATAGGACTTCACTGATGGAGGTACTACGATTCCTATATACCTGATGCCTACTTAAACACGATTTTTGCAGTTGGACACTTCCGTAATTTAGCAACTAAGTCTCCGATAGGATAGTTTCTACAAGAATCGTCTAAGTAGATACAATGAGAATTGACTCACGCTGGGCTACACCGACCA
AGGGTAGTAGCAATGAATTGCCATAGGTACGGTGCTTGATGACCAAGATGGAGGTGCCACTCCTACCGAGAGATTGTTCTCGTGCGTGTACCCGGGGAGTAGGAACATCGGGTGGCCTACGGGACTACAGGTTTACTAATATCCAGCATTACCCAGTAGGTACACCATCATCTATGTTCTATGTGGTCATGCAATCTAGTTT
ATGACTACTTGTCCGATTAGCGTAAGACCTATACCTAGACTGGAAACCCCAACTATCCTCCCGCCTAAACTGGGACATGATTTCGCCCGCCGCTGAGCGGTGCGTAGTGTCCACGGTGGGCTTCATTCTTCCGTTGTGGTCAAGGTACTCTGGAACCCACCAATAATTCCTTTCCACTTGGGGGTCCAAGATGGACAATCGC
TGTACTCAATCTTATAGTTCTTATTCAGGTGTTCCGCGTGCGCTTGACTATAAAGATGGATTCAGGCATAGTAGAAACTGCGTTTTACCACAAGTAGGAGCCCCTACGATTTACACTCTCATTTCTAGCACAGTCCTATTTTTTGGGATCTCATCACGGGAGTTGGGCTTGCCTGAGTGTGTCAACGGATCCCTTTGGAGAG
GCACGCAGGGCACTTTAGTAGTAGTGAAAAAGCGCTCTGCTGCTAAGCGGACTAAAGAGGGTGCGTTTGGCCATTTCGCCAGTATTCCAGATGTACTGCGGTCCGCTCCAGTTCTGCTTCCTAATATTTTCTGGACATCACCTTCTACGTAGCTTCTCTGTTCGGAGGTCTTTTGACTTCCAACTAGGATATCACGGTTATC
GCGACGAGATCCATAACCGGTGGTTGTCTAGCTATAGAGGCGTCCGTGCGAAGGCTAGGCTGGCATACAGTTCACCCGGAGACTCGAAAGATGGAAAAGATGCCAAGCTCAATACGTTAGATCCCAAGTGAAATAGTTTGCACGTAGAGTGTTGTTCCTTGCAGCTGAGTTGCACCTAAAGGAAGTTCCGGCGGCAATATTT
TTGGGATCAGTTCAACTTCCAAGATGTGGTGTAGAAGAGACAAAAGGGTGACACATCAACCGGTGAGACTGTGGACACATTCACCCGGTGATCAAAGACAGCAGGGGTTTAAAATGTTATCTAAAAAAGCGTCCTCAACGGCACGCGTCGTTTGCGCATTTTTCCGCGGAAGACCCTTCGATAATCTCCACGTCCTAAGAGT
CGAGTAGAGCCAAAACTGTTACTTTATAAAACGCGCCGCGGCCCGGGTATTCCAATCTTGGGCACGGGGGACTTCGCCGATGGAGTGGGCCCCCCCCGATGGGTGTTGCTCCGCCTGAGTAAAGATCGTTGACCACCACTAATCTCGTTCAATGTGCTTCAAACCACTCTTACTAGTCTTTACTTAATAGTCCCTCGCTAGC
CGATACTGACTATAGGCAATGTCCTCCACGGCACGACTGAGAAAGGTGTGCGAAATACAGTTCCCAGCTGCCTTTTGGTATTGGATGGGGACTTGACAGATGGAGAACAAGACTGCCCACTTGTCACTTGCAACATCCTCTTAACGACTGGCTTGCTCATTAGGTACGCCTAATGATCATCCCCGTTATGTTCCCTTATGAG
CCCACCATGGAAGTGCGCGCCGTTTCGACTTGTCAATGAGTGTCTTGCTCACAGCTCTGTAACTACTTCCAAAGGGGTCAGCACGCCGAAATGATAGTCAGGACGAAAGCGATCCTGGGAGCACTATCACACGTGACTTCCAAGTACGATCCGACCTGGTAAAGCGGAACTGGCCCGTTGCCATTGTAATTCGGTAAGTATG
TATAGCCTTAAGCTCCCCGTATTAACAAAGATAACGTGAGTTCTTTTGTCGGAAATTATCACCCAGTGGCACGAAGGCGGCTTTCCCGAAGCAAAATGGTCCCGACAGAACGCTTATGGTTCGAGGGCTGGGTGGGCAAAGCGGGGTTCCGGCCTTGCATGCCCTTATACACGTAATGACTTCCACCGTGGAATCAGTAGAC
CGTCCGGTTCTAGACTTCCAAGAGATAATCCGGCTGGAGCAAAGGCTGGTATCCACAACAGGGTCTAGGTGGCCAGACAAGCTTTGGGGTATGTAGGGATATCCGGAGCTGGAGAAGGTACCACTCAGAATGATGTTTTTCCTTACATACTCTACCACCTCGGACCCACGTAGTTGGTTTGGATTATTTCCTGCATAGGATC
CTACTATAATTAACCGCGTCAGTACATAGACCGGGAATCGCGGGCGGGGGAGGTCGCGAAAATCAGGTCCTATGTGGTGAGCGAACATAATTAGCTAGGCATGCGATTGAGCAAAGGTCTTATCTCAGGAGACCGTGTTTGACGCCACATCCACACTTGGGACCCGCAGGGAGACTACAATGGACTTTTCAGATGGAAGAAC
TCCAGCTCGTTCTTCCAAGATGGTAGGTAAAATCTCTTTCGGCCCCTATATGCCGCTTCCTCGATCCCAACCCACTGGAACGTAGTGTCTTAGTGATGCGACCTTACTATGCTACGGGTCAGTCGAGTGGTAACCTATCATCGAGCTGAAAACGACAAGATCGCGACAACAGCAAGTTCAACCAGGTAGGACGGGTTCGTGT
ACATGACTTCCGCTATGGATTTAGTACTGCTAACAGTACTTTGCCTTCGCGGTGCCTTGATAGCGAGACGGCCGGATCAGCTGATTTGCGTTAGTTTCCCCGGCTTAGGCGGTGAGAGTATTACTACATTTCGAACTGTTCCGGAATATTACGATTCTTGTCCATCGGTCACGGCGAGGGTCCCAGATTCACTGTACTATAT
TCACCGCCTTGAAAGATCCTACATAAAACGCTCTACTTAAAAGAAGACTTCCAAGATCCTCTCAGTATAATGTGTAGCCTCCCCAAGGTGACGCGGGAGCCTAGAGTCTTTACCTTCCAAAAGGGCCACTTAGCGTGGACATGTATTAAAACGTTCATCTGATGACTCGCTGAAACATATGCTAAGATTATTTGATAGGAAC
        """.trimIndent()

    val k = 15 // kmer length

//    val expectedResult = """
//            TTAACC ATAACT TTAACC TGAAGT TTAACC TTAAGC TTAACC TGAACA
//        """.trimIndent()

    val reader = dnaStrings.reader()
    val lines = reader.readLines()

    val result = rms.doRandomSearchMultipleRuns(lines, k, 3000)

    //println(result.joinToString("\n"))  // rosalind format
    println(result.joinToString(" ")) // stepik format

}




