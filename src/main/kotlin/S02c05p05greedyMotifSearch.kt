@file:Suppress("SameParameterValue", "UnnecessaryVariable", "UNUSED_VARIABLE")

import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Test
import util.greedyMotifSearch
import util.mostProbableKmer

/**
 * @link: https://stepik.org/lesson/240241/step/5?unit=212587
 *
GreedyMotifSearch

 */

fun main() {


    /**
    This dataset checks that your code always picks the first-occurring Profile-most Probable
    k-mer in a given sequence of Dna. In the first sequence (“GCCCAA”), “GCC” and “CCA” are
    both Profile-most Probable k-mers. However, you must return “GCC” since it occurs earlier than
    “CCA”. Thus, if the first sequence of your output is “CCA”, this test case fails your code.
     */


    val dnaList = listOf(
        "CATCACAACTGTCCTAACTTGCCGAAAACAGGTTATTTGACCAGACGCTCGAACATTTAAGCCCGTGATTGGACGGTATTGGTCGCGAATGTACGACTGGGGCTTCCTAGGAAACGGGGCATAAAATATCTTTGTCGGTGATAGCTTCTTTATTCG",
        "AGGGCCCGCAGTTCCGGACGGCAATTCCTGAGCAATCGACGGCTTAACCGTGATTATCACCAGCCGTGGCAACGGGCCAATCTCGCGCTTAAAACCAATACCTGTGAATAAGTTCTTACATGTTGGTGGTTGTGGTATTGAGTACTAGTCCCGAGT",
        "TCGTGACCGCTCTGAACGTCGATCACGAGCGACTTGGACCGCTGATCCTGTCGATGATGGCGGACTAGGAGCTAGGGCCTGGGGCACCGAGAACGCGAGTGACAGATAGGTTGAGTATGAGATTGTGGTCTTATGCATGAGTAATAAAATACGATG",
        "AACTGGAGTGGTCAACAAGGTTAACGCCACAATATTCGGTCGTTTATCCGGTGAAATCGTAAGTGAAACATCGCCATTGAAAATTGTGGCTGCTCGATGACCGCGCCGCTGCAATAACCGGACCAGCAGTCTCGGTCTTGCGCTTACAATTGACCA",
        "TATGCGAGGGAGTTAAATGTTGGGTGTTGCTGGTCGCTGAAGTTGGAACGATTCGCACCAAAGGGGGCTATACAATTGGTAAATCTCTGCGGGCTCGGCATGGTGATTAAGTATGTACTTAGACTACCCTACAAATGGTAAACTCCAGTAGTCTAC",
        "CGACTCTGCGCTTCAACCGTTTTTGCATGTAGCCAGCTGATCGATGTTTGTAGTTGGTCGCACGAGATACCCCGCAATATATCGTGCAGTCAGGCGCTTACTAGTGCATACTAGTCTTATCAATTACCGCTTGATCTTCGACGCTCGGCGTAGGTT",
        "TGTTGATGTTCGAAAACGCTAGCCGGCATGACGCGTACATAGTGGTGCAAGAACGCATTTTATGAGATGAAACAAACATTATAGGAATGTACCTAACCGGACCAAGCCCCAGGCGTCAGTGGGGAGCAACGTTACTAAGCCATTGTGCCAGGGTGT",
        "GGCTGTCAGTTACCTATGGTGCCCAGACTGGCCTTTCAGGGTCCAGCTGAGCTCCTAAGATGTGGATGGTGGCCTTCGACAGCAGCACGTTAAATTTTGTATGGAATACCTTTGAGAAGACTCGATTTGAGCTCATTAGAAGTCAATTAAGTCCAT",
        "TATATCAATGGGTGCAATAGTCACTACATCGGGTGCTTACTCAGAACTATCCAAAAATGTGTAGTAGCATAGGTTCACATAATGCGGGCTTTTTGGAAAGGACCTTAAAAGCCCCTACTCTGTTGGTGGTCGCTGCCCGTCTCAGCTAACGAGTAC",
        "GCTGTTAAGACTTCCACGGCGAACAATGCCTTGCGACACTGTATTGAGCTGCTGCGATACGCATTTCGTTCCGATAATTGCCGCTGTGGTTGATGGGCGCATTGGATACTGTTAGTCGAGTTCCCCCTGGTTAGATTGACCGAGTTATAATCACCG",
        "TGTGGTTGTTGGTTGTAGGGGGCGTGGGCCGGGCGACCAGTAGTTTCCATAAGGGTGCACGGACGGCGAAAGTCGGACAAACGTCGCTCTTCTTGCACGGCGGCGGGCCTCTTGAACAGAGGCGGCCTGATGGTACAGAATCTAGGAACACTGTTT",
        "GCCTAGCTGCCATTTAAATTCTAGATCTGTGTATTGTGTCGGTGTTAGATGCCTTTCTCTCACTAGAGAGCCCATGCGTTCTATAGTTGTTAACGTTCACCGTGAGTATGCCGATTTGTTACGCAGCGTCACCTTCTGCGAAACTAGAGGGTTCCA",
        "ACGACGATTGTTTGGCTACAATAAACCCTGGTCACGACGGGCGCTGGTCCAACGGAAGCGAATACGTCCGCCAGTATGGCTATGAGATGTGTACCGCAGCTCTTGTTGCCGAACAGCCGCAGCACACTGTTTTGTTGGTGTTGGCATCTACATAGC",
        "GAGATTTGATGAATCGGTGTTAGTCTTCTCGAGGTAATTTGTTGGGGTCGACTAATTGTGAGGTATAGCAAAAGCGCTCGAACCTGTAGATGCTGGGTAGCGGTTTACCAGGGATCCTTAGACATCTCTATACCCTTCACTGGCACCCGGACGAAG",
        "ACGAACACATTGTGGGTGGAGTTAGGATCAGATATTGCTGGTCGTAAGTAGCATTGGTCTGGCGACGTGTGGTGTAGGTGGTCGCAACGTGTCCAGTGGATATACTTTGTAAGGGTGGCGGCACATGGTCTTAAGCTATCACCCAGGGATGCGGGT",
        "TGGCTCTCCTAGAGTTGGTCATTTGCAACTATGTGATGTGGGTGTTCGCGGGTGGCCGGTTTCCTATTTGCCATTAGCACTTATTTGTCTGTATCGCGGTGGATCGATCAACGGGTAAGAGTATCAATGATCTGATAGACACTAACGAGCAACTAC",
        "ATCGAACGGTTTGAACTTTAACTATCTGCATTGGTAGACGAACAAGCATTCGGGAAAAGTATTCATCATGGTCCTGGTCTTGTGACATGAATCAGCCCTGTGTTCCATTGTGGCTGCTCGCCATAAACCCGATCTCTACAGCGTTGATTCGATCGC",
        "TATAATTAGCGACAGGCTACCGCGTTACGAATTCTCCTAGGGACAGGTTGTCGCTGTTTGGATTCGTGTGGAGCTATCTCTCCCGCCACCACACATACAAAATGGATTGCGGGGGATGCGCGTACCCACTGTGAAGCTCCATAGCTAGATCTTGTA",
        "TGTGGATGCTAGCAACAAGGTGCCGCTCCTGTTGATCCTACTCCAATCCGCTCAGCTCCCGGTACCGGGTAAAGATTGTTTTTCAGAGCGAGCCCAACCCTGAATCATACACCTCTCTTACCGAGGGGGAACGAAGGTCTCTAAATCAATTTGCCC",
        "TGTGTAGGCGAATGTTGTTAGGCAAGGTGATTGGCTAGGTTGATCAAATTGGTTACGTTGACGTTCTCTGTCTGTCGTTGGTGGTGAAAAGGCGTTTTGCAAGACAAAATTCTCCTCGGCGTTTAATAGAGGGAAGCTGGCGCTAGGACGTTAAGT",
        "AATAACTAGCACTGTGGATGGTGGCCTGATTACAACAGCGTATTATGACCCTTCAGTTGGTTCCAGCCAGCGTCTGGGGAATGGTTTCTGCATGTAAAGTCCCCCAGGTCCGTACATTCGCTCGCATGCATGACAACGATTGCCATGTCTATTAGT",
        "TAGTGGTCCAATCGTGACTCAACGCGGCAGAAATTCTGCATTACCAAGACTTCGAAAGCCCACCTGCAAAGAGTACCTTCTTCTGCTAAAACCATCCCAACCCAAAAGAGGTAGTTGTCACCTCTACGTCGATCCGTATTGAAGTGTAGTTGGTCG",
        "AGCGGGAACCTAAATTTTTCCGTTTGATGCGGCAAGTAAAATCCTCGATGTTGCTGCTGGAGTGTGTTAACCTGGCTCGACTGAAGAAGACGTACGAACACGGGTCGGTTGGTCCTTTTGTCTTCATCGGACAGATGACTTAGCTCGCGCGGGACG",
        "AGATGTCTTGAGCCGGAGGGACCCCGATGAGCTATTACTCAGGTTTTATCCCTCCTAGCCTCCAGGATGCTAGTACCCGTGCGTTGTTGCTGATTGTACACCTAGTACAGTTGACGTATAACGGATGCAGTGCAACGCTGTACTAGGTCCGCCCCT",
        "AACACAACCCTGGATATGAGCAAGAACACTCCTGCGCCGGGCATTTGCTACTGATACGGCGTGCTCTAGTCGTGGTCGAGATACCGTCTCGTATCCTACCCATACGAGCTGAACCGGTCCCTAGCCTCACGCGGAGCAGTTTTCTGTAGGTGATTG"

        )
    val kmerLength = 12

    val expectedResult = listOf(
        "GCC",
        "GCC",
        "AAC",
        "TTC"
    ).sortedDescending()

    val result = greedyMotifSearch(dnaList, kmerLength)
    for (i in result) {
        print("$i ")
    }

}




