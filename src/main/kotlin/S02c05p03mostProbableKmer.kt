@file:Suppress("SameParameterValue", "UnnecessaryVariable", "UNUSED_VARIABLE")

import util.mostProbableKmer

/**
 * @link: https://stepik.org/lesson/240241/step/3?unit=212587
 *
Given a profile matrix Profile, we can evaluate the probability of every k-mer
in a string Text and find a Profile-most probable k-mer in Text, i.e.,
a k-mer that was most likely to have been generated by Profile among all k-mers in Text.
For example, ACGGGGATTACC is the Profile-most probable 12-mer in GGTACGGGGATTACCT.
Indeed, every other 12-mer in this string has probability 0.
In general, if there are multiple Profile-most probable k-mers in Text,
then we select the first such k-mer occurring in Text.

Profile-most Probable k-mer Problem: Find a Profile-most probable k-mer in a string.

Input: A string Text, an integer k, and a 4 Ã— k matrix Profile.
Output: A Profile-most probable k-mer in Text.

Code Challenge: Solve the Profile-most Probable k-mer Problem.

 */

fun main() {


    val genome = "GCTTTATTCTCTGGCGGGAATATGGCGTGTACTGTGCTGCAATCTCGGGACCCAGACGCATTGTCAGAAGGGAATCCCATGCCACCTCCTTAGGCACACACCGGGTAGCTGCGCCCAACTGCAGGTCGCGCGGTCCGGGGTTTCAAGATAGATAACGCATTGGAAGAGATCCTGATTACTCCACACTTCTACAGCGGACGTTTACAGCGACGCAGGCAGACGTTGGGTCACGTAATATTCGTCCAGGGTTCCCGCTGAGCGGACAGAAATACCTATGGTTCAAACTGATGTAACAATGTGGGCCTACTATCCGTGGTGCGTAATGCATAATCCTTATCCTACTCATTGTCTTAGCTCTGCGCCGGCGGCGATGGTTACGGTCTGAACAGGGTAATCGCTGCAAGTGACGGGCAGTAACGATCTTTCTGTAGGTTGCCTAGAGTTGTGGGGCTAGAGGGACCGGCAGATTTGATGGACGTTTAATCCAAGTTTTTGGACCCCGACTCAAAGTTGTAGAGTCGTTACGTACCTCTTGCAACGTTTCTCTCCTATGCCTAGGAGGACGATAGTATCTATAGTGTATCAGCTCTGGACCGAATATCTAGTCCCGAACTTCTGGAGCCTCAAACTGACAGCTTCGTACCTACGGGGGCACTCGATTTGCTTTCCGAATACATGGCGCGACTACATTCCGTTCACAGCGCTGTGGCGTGTTGTTTGAAGCGAAATACCATTTCTGAGCATAGTATTAGGGCGTGGATGATTGGGTCTACGTGCCGACGCTGACTCTAAGTGGGAATGCTACGGTTCAGGACTCCAAAATAGACGGCGAAGGCACACTGACGTTTAAATGATTTTTTGGAGAGGATTAGACACACTTACATTCACGCGGCATCAAGGCGCGGAGACTAGTTGGGGCCAAATATGCGTGCAAGCAAACCTGAGTATACTCCTGGGCAGTATGGCGTTCAGCTGGATTCATTTTCCACTGTACCATTAA"
    val probString = """
            0.31  0.197 0.31  0.296 0.169 0.155 0.268 0.239 0.169 0.268 0.296 0.211 0.169 0.338
            0.254 0.254 0.155 0.296 0.239 0.296 0.324 0.296 0.254 0.254 0.239 0.352 0.225 0.225
            0.296 0.254 0.211 0.211 0.268 0.324 0.169 0.211 0.282 0.296 0.239 0.211 0.254 0.183
            0.141 0.296 0.324 0.197 0.324 0.225 0.239 0.254 0.296 0.183 0.225 0.225 0.352 0.254
        """.trimIndent()
    val k = 14 // kmer length

    val expectedResult = "ACAATGTGGGCCTA"
    val result = mostProbableKmer(genome, k, probString)
    println(result)  // correct!!

}



