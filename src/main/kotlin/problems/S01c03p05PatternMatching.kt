@file:Suppress("SameParameterValue", "UnnecessaryVariable", "UNUSED_VARIABLE", "unused")

package problems

/**
 *  1.3 Some Hidden Messages are More Surprising than Others

Code Challenge: Solve the Pattern Matching Problem.

Input: Two strings, Pattern and Genome.
Output: A collection of space-separated integers specifying
all starting positions where Pattern appears as a substring of Genome.

See also:
stepik: https://stepik.org/lesson/240215/step/5?unit=212562
rosalind: http://rosalind.info/problems/ba1d/
 */

fun main() {
    val genome2 = "GATATATGCATATACTT"
    val target2 = "ATAT"
    val genomeTest = "GATTAAGGCACACGATCGGCACACGAGGCACACAAAGAGCGGCACACCCTTTGGCACACAGAGGCACACGGCACACACCTCTGGCACACAGGGCACACCTGGCACACGAACCGGCACACTCGGCACACGGCGGCACACGGGCACACAGGCACACGGCACACAGGCACACGGCACACCTTTTTGGCACACGTTAGGGCACACGGCACACCCGGCACACAAGGGCACACGGCACACGGCACACGGCACACAGGCACACCGGCACACCAGGGTTGGGCACACGGGGCACACCTATGGCACACCGTGGCACACCCGGCACACAGGCACACTCGGACCGGCACACACGGCACACGGCACACCTGCGGCACACTTAGGGCACACAGGCACACATCCGGCACACCTCATCGGGGCACACCGGGCACACGTCGGCACACTGTTGCGGCACACTGGCACACTGGCACACAGGCACACGGCACACCGGCACACTGCTGGCACACCGGCACACGATGGGCACACGCAGGCACACGGCACACTAATTCGGCACACCCTGGCACACTGGCACACGCCGCGGCACACAGGGCACACATTTCAGGCACACAGGGCACACGGGCACACGGCACACTGGCACACGTTCGGGCACACGGCACACGCTGGCACACGGAAGGCACACGTCTTAGGGCACACGCCGATCTGAGGGCACACGGGCACACTGGGCACACGGCACACCATTTATCCTTGGGCACACTATGGGGGCACACCCTGCTTTGAAGGGCACACTGGGGCACACCGGCACACCCGGCACACAGGGGGGGGCACACGGCACACAAGTTCGGCACACTGGCACACGGAGGGCACACGCGGCACACGGGCACACTCTGGCACACGGCACACTGGCACACCAGGGGGGGCACACATCGGGATGGCACACGGCACACTTTCAGGCACACGGCACACCCGGCACACCGGCACACCGCGGCACACTGGCACACGGCACACTGGAGAGTATGGCTCGGCACACGACGGCACACTTCATTGGGCACACTCGGGGCACACCGGCACACGGCACACTGGCACACGGCACACGGCACACGGCACACTTTCGGCACACGGCACACGGCACACTGTCGGTGGATGGCACACAAGACGTCATGGCACACCGGCACACGGCACACGGCACACCGTCGGGCACACGGCACACGGGCACACGGCACACTATGGCACACTCAGTGTGGCACACAGGCACACGGCACACGGGCACACGGCACACCGGCACACGGCACACGTGGCACACGGTGGCACACGGCACACGCAGTGGCACACTCGGGCACACGACGGCACACGGCACACCAATACGGCACACCCTGAGGCACACCTGAGGTGGCACACAAGGCACACGGCACACGAGGCACACGTGGCACACAGGCACACGGCACACGGCACACCGGGCACACGGCACACGTCGGCACACGTTCTAGGCACACGGCACACCGGCACACGCAGGCACACGGCGGCACACCGTGGCACACGCGGCACACGAGTATACGATAACCGAAGCTTGGGGCACACGCGGCACACTCAAAGGGTATCGGCACACGAAGGCACACTATCAGGCACACCGGCACACCGGCACACGGCACACGGCACACTGAAGGCACACGAGTGGCACACCGGATCCAGCGATGGCACACACGGCACACCGGCACACCGGGCACACGGCACACGGCACACGGGCACACGGCACACGTCGGCACACTAGGCACACGGTGGCACACCCGGCACACCGGCACACAAGGCACACGCGAAGTCCAAAGGCACACTGCGGCACACGGCACACTGGGCACACGGCACACACTGGGCACACGGCACACCGTTGGCACACGTATAATGGCACACTCATATGGCACACGCTGGGCACACCTAGGCACACTGGCACACTGTGTAAGGCACACGGCACACCCAAAAGGGCACACTATGGGCACACGAAAGGCACACGGCACACGTGAGGCACACTGAGGCACACCCCGTGGGCACACTCTGGGCACACGGCACACGGCACACCAAGCCACAGGGGGATGGGCACACACGCGGCACACGGCACACGGCACACCGTAGAGGCACACGGCACACTCGGGCACACTGGGGCACACTGGCACACAAGCTGGCACACGGCACACACCGGGCACACGGCACACTTAGGGCACACTGGCACACCTGTACCTCTATGGCACACTTGGGCACACGGCACACCGGCACACGGCACACTTGTGGGCACACGCGGTGGCACACCCGGCACACCGCGCATAGGGCACACTCGGCACACGGCACACGGCACACTCTGGCACACCCTAAAACTCGGCACACGGCACACGAAGGCACACGGCACACATAGTCTCGGCACACGTCGGTGGCACACAGGCACACAGGCACACGGCACACGGCACACCAGGGCACACAGGGCACACCAATTCGCGCGGCACACCATCCACAAGGCACACCGGCACACTAGGGCACACGGCACACGGCACACCTAGGCACACGGCACACTCTTGGCACACGGGCACACGGAGGCACACGGGCACACGGCACACTCGGCACACGGCACACCGGAATGCCGGCACACGTATGGCACACCGGCACACTGGCACACGGCACACTTGGCACACCTGGCACACGCCGGCACACGAGAAGGCACACGGCACACCCGTGGCACACTATTTTCGGCACACGGCACACGGCACACGGGCACACGGCACACGTAACTCGGGGCACACCGGCACACGTGGGTCGGCACACATAAGGCTAGGCACACATAGAGGCACACCTGGGCACACGGGCACACGGCACACGGCACACGGCACACGGCACACGTCCGGCCGGCACACCCTCCCGCATGCGACTCGGGCACACGGCACACCCATAGCGAAGCCCTGGGCGGTGGAGGCACACGTGGCACACGGCACACGGCACACCCGGCACACGGGCACACGGCACACGGCACACGGGCACACCCCGGCACACGGCACACTGTTGGGCACACTGGCACACGGCACACGGGGCACACGCACCAGGCACACCCGGCACACCGGCACACACGGCACACTGGCACACCGGCACACCCCCAGGCACACATCGCTCAAATGGCACACTGCCGGCACACCCCGGCACACTGGGCACACTGGCACACTGGCACACCATAAGGCACACGGCACACGGGGCACACAGGCACACTGAATCCTAGGCACACGGGGCACACGGCACACAGTCGGCACACAGGCACACTATTGTAGGCACACGATCCACCATAGGGCACACCTGGCACACCGGCACACGGCACACGGCACACGCGGCACACGCCGGGGCACACCGGGCACACTGGCACACGGCACACTTGCTCTAGGCACACTGGGCACACCACGTTTAGCCAGGGGCACACTGTGGCACACCGGCACACGGCACACCGGCACACGGCACACCATCTGGCACACGGGCACACGGCACACTGGGCACACGGGCACACAGGCACACATGGCACACGTCCGGGCACACAGGCACACGGCACACGGGCACACTTAGGCACACGGCACACATAGGGCACACTGGCACACGGCACACGAGGATCGGCACACAGGCACACGTGGCACACGGCACACTAGGCCGGGCACACGGGCACACTTGGCACACGGCACACGAGGCACACCTTTCTTGGCACACATCTGCGGAGGCACACGGGGCACACATGCGGCACACAAGGCACACCCGGCACACGGCACACGGCACACGGCACACAGGCACACGAGGCACACCCCGTGCGGCACACGGCACACGCGCCAGGCACACGGAAATTCGGGCACACGGCACACCCACTACATGGGCACACGATGGCACACAGGCACACGATAGGCACACACAGGCACACGGCACACGGGCACACCCATCGTGGCACACGGCACACGAAGGCACACTCGGCACACAGGCACACTTGGCGAACGGCACACGGCACACCGGCACACGCAGGCACACGGCACACGTCGGCACACATTGGCACACAGGCACACTGGCACACCATGGCGGGGGCACACTGACAGCTGGCACACCCGGCACACCTGCGGCACACGGCACACGGCACACGGAGCGGCACACGGCACACCGACTACTATATGGGCACACGCTGGCACACTCCCGGCACACGGGCACACTCGGCAAGGCGGCACACCGGCACACAACTGGCACACGGGGCACACGGCACACCAGGCACACGGCACACCTGTCGGCACACATGACAGGCACACTGTTCGGCACACACGGCACACTCGGCACACATGTGGCACACCGGGCACACTCGAAGGCACACCCCGCGAGGCACACAAATCGCTGGGCACACCAAGAAGAATGCGGCACACAGGGCACACCATAAGGCACACCCGGCACACCGTGATTTGCGGCACACGGCACACAGGAGGCACACAGGAGGCACACGGGCACACGCGGCACACCCGGCACACGGCACACACAGGCACACCCTGGGCACACGTCGGCACACGGCACACGGGCACACTATGGCACACCATAACTAATCACGCTCAACGAGGCACACCTCGGCACACGGCACACACGTAGGCACACAGGGCACACGGCACACGGCACACGCAGCTAAGGGCACACGGCACACTCGGCACACTCGGCACACGGCACACCGGCACACGGGGCACACCTCGAGGGGCACACTTGGCACACCCCGGCACACCCCGGCACACGGCACACGGCACACCGCGGGGCACACCCTAGGCACACTAACTAAACGCGGGCACACGGGCACACCCTTATGTTCCGGCACACTGGCACACCCAGAAGGCACACATAGGGCACACCATGGAGGGCACACATGGCACACCTAAGATTCTCCGGCACACATGGCACACGCGGCACACTGGCACACGATTGGCACACGGGCACACGGCACACATGGCACACGGGCACACTCTACACTGAAGTTTCACAGGGCACACAGGCACACTGGCACACGCAGGCACACGGCACACTGGCACACGAGCCAGGCACACCCGGCACACGGCACACGGCACACCGGGCACACGCCACGAGCAGGTGGCACACTCGGCACACCAGGCTCCGCACGTGGATCAGGGGCACACGGGCACACGGCACACATGGCACACGTGGAAAGTCGGCACACGACCGGCACACATGGCACACCAGGCACACCTGGCACACGGCACACGACGGCACACGGCACACGGCACACCGCGGGCACACCTGATGAGGGCACACGGGCACACAGGGAACAGGCACACCGGCACACCCAGAGGCCTTGGCACACGGGGGCACACGTGGCACACGCCTTCGCTGCGGCACACGTGGCACACACCAAGGCACACATCCTGGCACACAGGCACACATACGGCACACGGCACACAGGCACACCTGGGCACACGGCACACCGGCACACTTGGCACACGAAGAACAAGATGGCACACCTTCTGGCACACGTTGGCACACAAACGGGCACACTGGCACACGGCACACCCCGGCACACATAGGGCACACGGCACACGACTAAAACCTGTGGCACACATGGCACACATAGGCACACCGATAGCAGGGCACACCCAGGCACACGGCACACGGCACACAACCCGGCACACGTGGGCACACGGCACACTGGCACACATCAGGCACACCAGGCACACGGCACACTCTGGCACACGGCACACAGAGGCACACTGTATGGGCACACTGGCACACGGCACACCCGCCGGCACACGGCACACGGGCACACGGGCACACTGAGCGGCACACGGGGGCACACCGGCACACCAAGGCACACTCGAGGCACACAGATCGGCACACCCTTCACCCGGGCACACATGATTGGCACACACGGCACACCGTGAGGCACACTCCGGCACACAGGCACACGGCACACAGGCACACTGGCACACGGCACACCGGTGCGGCACACAGGCACACCGAAGGCACACAGGCACACGCTCGGAGCGAAACGGCACACGTCACGGCACACATACAAGGCATAGGCACACTCCGGCACACGAGCGTTGGCACACTGGGCACACCACGGCACACGGGCACACGGGCACACGCCCGGCACACGGCACACGGGCACACGGCACACGGCACACCCTAGGCACACGGCACACGGGCACACTGGCACACAGGCACACTTGGCACACAAGCTGGGGCACACGGACAGGCACACGGCACACCGGCACACCAAGGCTCGGGCACACGGACCGGCACACTAGGCACACGGCACACACCGGGCACACGGCACACGGCACACGGCACACGGCACACCGGCACACTAGGCACACGGCACACCATCGAGCGCAGCAGTCGATGGCACACGTGGCACACCGGGGCACACATCGGCACACCGGGCACACGGCACACTATTGGCACACGGGGCACACGGCACACGGGCACACTCTCAGAGGCACACGGTTGGGCACACGGCACACGGCCGGGCACACTACACGTGGCACACTTCGGCACACGGCACACGGCACACCAGTGGCACACCAGGCACACGGCACACAACAGAATGGCACACAGGCACACGCATGGCACACTCGGCACACGGCACACTGCTATAATGTCGCCCGGCACACCGAACAGCCGCACAGGCACACGTTTGCTTTGGCACACCGGGCACACGCGGCACACCGGAACTGGCACACGGCACACGGGCACACAGGCACACGGGCACACGGGCACACGGGCACACAATGGGGCACACGGCACACGGCACACTATAAGGCCGGCACACGGCACACAGCCGGCACACATGGCACACCGGAGTGGCACACGGCACACGGCACACGTAGGCACACACAGGGCACACAGGCACACGAAGGCACACGGGCACACTCGTGGCACACCTTGGGCACACCAGGCACACGGCACACTGGCACACGAGGCACACCAGGCACACATTGGCACACGGGCACACGGGCACACGGCACACGGCACACTACCGGCACACGGGCACACGTCGGCACACCAGCAGGGCACACGGGCACACCGGGCACACCGGACGGCACACAAAACTTACGGCACACCATTAGGCACACGGCACACGGCACACCAGGCACACGGCACACATGGCACACTGGCACACCGGTAATCTTTGCAAGGGCACACCCGGGCACACAGTGAGGCACACTGGCACACTAAATTTAGGCACACGGCACACGGCACACGGCACACACGTATTAGGCACACCCAGGGGGCACACCGGCACACCGGCACACGGCACACCGGCACACCTGGGCACACAGGCACACGGGCACACGGCACACGCGGCACACGGCACACGGCACACCGCCAGGCACACCGTGTGCTATCCCCCGGGGCACACAGGCACACAGGCACACAGGCGGCACACTAGGCACACGGCACACATGGCACACGGCTGGGCACACACCTGGGCACACGCTGGCACACGGCACACGGCACACGGCACACCCTCGGCACACGGCACACCAGGCACACCTGTAGGCACACCCGCGGCACACCGGCGCTGGGCACACGGCACACGCCGGCACACGGCACACCTGGCACACGGCACACTGGCACACAGGCACACTTGGCACACGGGCACACGGCACACGGCACACCTACGTGGCACACGGCACACCGGCACACAACGATCGCGGCACACGGCGGCACACGGGCACACCACTTCGGCACACGTAGGCACACTTTAGGGCACACGATAATGGGCACACTGGGGCACACGGCACACTGGCACACGGCACACGGCACACGGCACACCGGCACACGGCACACGGGCACACTGTGGGCACACAGTGGGCACACTGGCACACCCGGCACACTCCCCACAGGCACACTAGGCACACCGGCACACTTGGTTTTATACGTATGCGGCACACGGCACACCAACCCCCAGGCACACGCCGGCACACGAACTGGCACACACGGGCACACGGGCACACTTGGCACACAGGCACACAAGGCACACCCGGGCACACTTAGGCACACGGCACACCGGCACACGGCAGGGCACACTTCGGCACACGGCACACAGGCACACGGCACACCGGCACACGGCACACGGCACACTCGAGGCACACTTTGGCACACAGGCACACGTGAACCGGCACACGGCACACTTTGGCACACGGCACACAGGGGGCACACCTGGCACACAGGCACACAGTTGGGCACACGGCACACGGGCACACACTGGCACACCGGCACACGGCACACGGCACACGGCACACGGCACACGGATAGGCACACTAATGGCACACTAGGCACACGGGTGGCACACCCGGCACACACGGCACACGACACAGGCACACGGGCACACAGAGGCACACAAGGCACACCGGCACACCGTGGCACACTAGGGCACACAAGGCACACGGCACACGGCACACAGGCACACCGGCACACCGCCCAGTTGGCACACTCCTCCGGCACACGGGGCACACTCAGGCACACCGGGCACACGAAGTTACGGGCACACCTGGCACACGGCACACTGGGCACACGGCACACGAGATGGGCACACAACCGGGCACACCATCCATGGCACACATGGCACACTGGGGCACACGTGGGCACACGGCACACAGGGCACACTGGCACACGGCACACCGTCTGGGCACACTGGCACACATTTGAGGGCACACAGGCACACGGCACACGGCACACGTGGCACACGAGGGCACACGGCACACGGCACACCGGCGGCACACTCCGGCACACGGGCACACGGCACACGGCACACCGTCGGCACACCGCGGCACACGGCACACGGCACACCGGCACACGGCACACCGGAGGCACACTACAGGCACACTGGCACACGTGGCACACTTGGCACACGAAGGCACACTGGCACACCCG"
    val targetTest = "GGCACACGG"

    val g = genomeTest
    val t = targetTest

//    val r = problems.ResourceReader3()
//    val g = r.getResourceAsText("VibrioCholerae.txt")
//    val t = "CTTGATCAT"

    println(printRepeatedTargetIndexesWithOverlap(g, t))
}

fun printRepeatedTargetIndexesWithOverlap(genome: String, target: String, startAtOne : Boolean = false): String {
    var foundIndex = ""
    for (i in 0..genome.length-target.length) {
        if (i > target.length + genome.length) {
            break
        }
        if (target == genome.substring(i, i + target.length)) {
            if (foundIndex.isNotEmpty()) {
                foundIndex += " "
            }
            var index = i
            if (startAtOne) {
                index++
            }
            foundIndex += "$index"
        }
    }
    return foundIndex
}

private class ResourceReader3 {
    fun getResourceAsText(path: String): String {
        val ress = this.javaClass.getResource(path)
        val retStr = ress!!.readText()
        return retStr
    }
}