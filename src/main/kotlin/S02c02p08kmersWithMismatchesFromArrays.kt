@file:Suppress("SameParameterValue", "UnnecessaryVariable", "UNUSED_VARIABLE")

import util.motifEnumeration

/**

2.2 Motif Finding Is More Difficult Than You Think
7 out of 10 steps passed
0 out of 10 points  received

Code Challenge: Implement MotifEnumeration (reproduced below).

Input: Integers k and d, followed by a collection of strings Dna.
Output: All (k, d)-motifs in Dna.

MotifEnumeration(Dna, k, d)
Patterns ← an empty set
for each k-mer Pattern in Dna
for each k-mer Pattern’ differing from Pattern by at most d mismatches
if Pattern' appears in each string from Dna with at most d mismatches
add Pattern' to Patterns
remove duplicates from Patterns
return Patterns

 * See also:
 * stepik: @link: https://stepik.org/lesson/240238/step/8?unit=212584
 * rosalind: @link: http://rosalind.info/problems/ba2a/
 */

fun main() {
    val sample = """
TGCACAGGGCCCTCACTACACACTG
TGCTGCTGCCAGGGACCTTTTCTTA
ACCAGGTGATGTCCACTCCCAGGGG
GGACGAGGGCGTGGCTAGGAGTCTT
AATATAAGCTGTAGCAGAGGAGGGC
GCATGACGATATTGAAGGGGTGATG
TAAATGGATTGACCGTTATCAGGGG
AGGGCAACCGGGACTTGCGACGTTG
AGGGAGGAAGGGTGAGTGAACTGCT
GCCCGAGGGATGGTCGACCGATCGA
    """.trimIndent()

    val reader = sample.reader()
    val lines = reader.readLines()

    val k = 5 // kmer length
    val d = 1 // hamming distance

    val expectedResult = ""
    val matchList = motifEnumeration(lines, k, d).sorted()

    var result = ""
    for (i in matchList) {
        result += "$i "
    }

    println("quantity = ${matchList.size}")  // step 5
    for (i in matchList) {
        print("$i ")
    }

    // answer is:
    // AAACT AAAGT AAATC AACTT AAGAC AAGCA AAGCC AAGCT AAGGC AAGTC AAGTG AAGTT AATAC AATAG AATAT AATCA AATCC AATCG AATCT AATGA AATGT AATTC AATTG ACAAT ACAGT ACCAT ACCCT ACCTC ACCTT ACGCA ACGCC ACGCT ACGTA ACGTC ACGTT ACTAC ACTAG ACTAT ACTCT ACTGT ACTTA ACTTC ACTTT AGACA AGACC AGACG AGACT AGATT AGCCA AGCCC AGCCG AGCTA AGCTC AGCTT AGGCA AGGCC AGGCG AGGCT AGGGA AGGTC AGGTT AGTAG AGTCA AGTCC AGTCG AGTCT AGTGA AGTGC AGTGG AGTTC AGTTG AGTTT ATAAG ATACA ATACC ATACG ATACT ATAGA ATAGC ATAGG ATAGT ATATC ATATT ATCAA ATCAC ATCAG ATCAT ATCCA ATCCC ATCCG ATCCT ATCGC ATCTG ATCTT ATGAG ATGCA ATGCC ATGCG ATGCT ATGTA ATGTG ATTAA ATTAC ATTAT ATTCA ATTCG ATTGA ATTGC ATTGT ATTTA ATTTC ATTTG CAACT CAAGC CAAGT CAATA CAATC CAATT CACAT CACCT CACGC CACTA CACTT CAGAC CAGAG CAGAT CAGCC CAGCT CAGGC CAGTC CAGTG CATAA CATAG CATAT CATCA CATCC CATCG CATCT CATGG CATTC CATTG CATTT CCAAT CCACT CCAGT CCATA CCATC CCATT CCCAG CCCTA CCCTT CCGAT CCGCC CCGCT CCGTA CCGTC CCGTT CCTAA CCTAC CCTAG CCTAT CCTCA CCTCG CCTCT CCTGA CCTGG CCTGT CCTTA CCTTC CCTTG CCTTT CGAAT CGACA CGACC CGACG CGACT CGATC CGATT CGCAG CGCCA CGCCC CGCCG CGCCT CGCGT CGCTC CGCTT CGGAG CGGAT CGGCA CGGCC CGGCG CGGCT CGGGT CGGTC CGTAA CGTAC CGTAT CGTCA CGTCC CGTCG CGTCT CGTGA CGTGC CGTTA CGTTC CGTTG CGTTT CTAAA CTAAG CTAAT CTACG CTACT CTAGA CTAGC CTAGG CTATA CTATC CTATG CTATT CTCAA CTCAT CTCCG CTCCT CTCGC CTCGG CTCGT CTCTA CTCTC CTCTG CTCTT CTGAA CTGAC CTGAG CTGAT CTGCG CTGCT CTGGT CTGTC CTGTG CTGTT CTTAA CTTAC CTTAG CTTCA CTTCG CTTCT CTTGC CTTGG CTTTA CTTTC CTTTG CTTTT GAAAT GAATC GAATT GACAA GACAG GACCT GACGT GACTA GACTC GACTT GAGAC GAGGC GAGTC GAGTG GATAC GATAG GATAT GATCA GATCC GATGC GATTA GATTG GATTT GCAAT GCACC GCATC GCATG GCATT GCCAT GCCCT GCCTA GCCTG GCCTT GCGCC GCGTA GCGTC GCGTT GCTAA GCTAC GCTAG GCTAT GCTCG GCTCT GCTGC GCTTA GCTTT GGATT GGCAA GGCAT GGCCA GGCCT GGCTC GGTAG GGTAT GGTCA GGTCG GGTTA GGTTC GTAAA GTAAC GTAAG GTAAT GTACT GTATT GTCAA GTCAC GTCCA GTCCG GTCCT GTCGC GTCGT GTCTA GTCTC GTCTG GTGAC GTGAT GTGCT GTGTA GTTAA GTTAC GTTAG GTTAT GTTCA GTTCC GTTCG GTTCT GTTGC GTTGG GTTGT GTTTG TAAAT TAACT TAAGA TAAGC TAAGG TAAGT TAATA TAATC TAATG TAATT TACCC TACCT TACGC TACGT TACTC TACTG TACTT TAGAC TAGCC TAGCT TAGGC TAGGG TAGTC TAGTG TATAC TATCA TATCC TATGC TATGG TATTA TATTC TATTG TCAAC TCAAG TCAAT TCACC TCACT TCAGA TCAGC TCATA TCATC TCATT TCCAC TCCAT TCCCG TCCCT TCCGA TCCGT TCCTA TCCTC TCCTG TCCTT TCGAA TCGAC TCGAT TCGCA TCGCG TCGCT TCGGA TCGGC TCGTA TCGTC TCGTG TCGTT TCTCA TCTCC TCTCT TCTGA TCTGC TCTGT TCTTA TCTTC TCTTT TGAGC TGAGT TGATC TGATT TGCCT TGCGC TGCGT TGCTA TGCTC TGCTG TGCTT TGGCC TGGCT TGGGT TGGTA TGGTC TGTAA TGTAG TGTCC TGTTC TTAAG TTAAT TTACC TTACG TTAGC TTAGT TTATC TTATG TTCAC TTCAG TTCCC TTCCT TTCGA TTCGC TTCGG TTCGT TTCTC TTCTT TTGCA TTGCC TTGCG TTGCT TTGGC TTGGT TTGTA TTGTG TTTAC TTTAG TTTCG TTTGA TTTGC TTTGG TTTTG
    // correct!
}

